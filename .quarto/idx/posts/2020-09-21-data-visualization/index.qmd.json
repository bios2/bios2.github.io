{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization","description":"General principles of visualization and graphic design, and techniques of tailored visualization. This training was developed and delivered by Alex Arkilanian and Katherine Hébert on September 21st and 22nd, 2020.\n","author":[{"name":"Alex Arkilanian","affiliation":"McGill University"},{"name":"Katherine Hébert","affiliation":"Université de Sherbrooke"}],"categories":["Technical","Fellow contributed","EN"],"date":"09-21-2020","image":"image.jpg","toc":true,"number-sections":true,"number-depth":1,"format":{"html":{"code-fold":true,"code-summary":"Show code"}},"execute":{"cache":true,"warning":false,"message":false,"collapse":true}},"headingText":"Training material","containsRefs":false,"markdown":"\n\nWelcome!\n\nThis training covers the general principles of visualization and graphic design, and techniques of tailored visualization. More specifically, the objectives of the training are:\n\n-   Make an overview of basic data visualization principles, including shapes, sizes, colours, and fonts.\n-   Discuss how to choose the right visualization for your data, what you want to communicate, and who you want to communicate to.\n-   Tools and principles to tailor visualizations, particularly in making interpretable, interactive, and honest visualizations.\n\n\n*Click on \"Show code\" to learn how to do each plot!*\n\n### Interactive examples\n\n```{r, echo = FALSE, results='hide'}\n# install packages if not installed already\nlist.of.packages <- c(\"ggplot2\", \"dplyr\", \"plotly\", \"lubridate\", \"htmlwidgets\", \"viridis\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n\nif(!(\"streamgraph\" %in% installed.packages())){\n  devtools::install_github(\"hrbrmstr/streamgraph\", quiet = TRUE)}\n```\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(plotly) # interactive plots\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n```\n\n#### Streamgraph\n\n```{r streamgraph-plot}\n# Script to make a streamgraph of the top 10 most popular dog breeds in \n# New York City from 1999 to 2015\n\n# load libraries\nlibrary(lubridate) # dealing with dates\nlibrary(dplyr) # data manipulation\nlibrary(streamgraph) #devtools::install_github(\"hrbrmstr/streamgraph\")\nlibrary(htmlwidgets) # to save the widget!\n\n# load the dataset\n# more information about this dataset can be found here:\n# https://www.kaggle.com/smithaachar/nyc-dog-licensing-clean\nnyc_dogs <- read.csv(\"data/nyc_dogs.csv\")\n\n# convert birth year to date format (and keep only the year)\nnyc_dogs$AnimalBirthYear <- mdy_hms(nyc_dogs$AnimalBirthMonth) %>% year()\n\n# identify 10 most common dogs\ntopdogs <- nyc_dogs %>% count(BreedName) \ntopdogs <- topdogs[order(topdogs$n, decreasing = TRUE),]\n# keep 10 most common breeds (and remove last year of data which is incomplete)\ndf <- filter(nyc_dogs, BreedName %in% topdogs$BreedName[2:11] & AnimalBirthYear < 2016) %>% \n  group_by(AnimalBirthYear) %>% \n  count(BreedName) %>% ungroup()\n\n# get some nice colours from viridis (magma)\ncols <- viridis::viridis_pal(option = \"magma\")(length(unique(df$BreedName)))\n\n# make streamgraph!\npp <- streamgraph(df, \n                  key = BreedName, value = n, date = AnimalBirthYear, \n                  height=\"600px\", width=\"1000px\") %>%\n  sg_legend(show=TRUE, label=\"names: \") %>%\n  sg_fill_manual(values = cols) \n# saveWidget(pp, file=paste0(getwd(), \"/figures/dogs_streamgraph.html\"))\n\n# plot\npp\n```\n\n------------------------------------------------------------------------\n\n#### Interactive plot\n\n```{r interactive-plot, message=FALSE}\n# Script to generate plots to demonstrate how combinations of information dimensions\n# can become overwhelming and difficult to interpret.\n\n# set-up & data manipulation ---------------------------------------------------\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(magrittr) # for piping\nlibrary(plotly) # interactive plots\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# import data\n# more info on this dataset: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-07-28/readme.md\npenguins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv') \n\n# get some nice colours from viridis (magma)\nsp_cols <- viridis::viridis_pal(option = \"magma\")(5)[2:4]\n\n\n#### Day 1 ####\n\n# 1. Similarity\n\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, col = species), size = 2.5) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Species\") + # labels\n  scale_color_manual(values = sp_cols) # sets the colour scale we created above \nggsave(\"figures/penguins_similarity.png\", width = 6, height = 3, units = \"in\")\n\n# 2. Proximity\n\ndf <- penguins %>% group_by(sex, species) %>% \n  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE)) %>% na.omit() \nggplot(df) +\n  geom_bar(aes(y = mean_mass, x = species, fill = sex), \n           position = \"dodge\", stat = \"identity\") +\n  labs(x = \"Species\", y = \"Mean body mass (g)\", col = \"Sex\") + # labels\n  scale_fill_manual(values = sp_cols) # sets the colour scale we created above\nggsave(\"figures/penguins_proximity.png\", width = 6, height = 3, units = \"in\")\n\n# 3. Enclosure (Ellipses over a fake PCA)\nggplot(data = penguins, \n       aes(y = bill_length_mm, x = bill_depth_mm)) +\n  geom_point(size = 2.1, col = \"grey30\") +\n  stat_ellipse(aes(col = species), lwd = .7) +\n  labs(x = \"PCA1\", y = \"PCA2\", col = \"Species\") + # labels\n  scale_color_manual(values = sp_cols) + # sets the colour scale we created above\n  theme(axis.text = element_blank(), axis.ticks = element_blank())\nggsave(\"figures/penguins_enclosure.png\", width = 6, height = 3, units = \"in\")\n\n# 4. Mismatched combination of principles\ntemp_palette <- rev(c(sp_cols, \"#1f78b4\", \"#33a02c\"))\nggplot(data = penguins, \n       aes(y = bill_length_mm, x = bill_depth_mm)) +\n  geom_point(aes(col = sex), size = 2.1) +\n  stat_ellipse(aes(col = species), lwd = .7) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"?\") + # labels\n  scale_color_manual(values = temp_palette) # sets the colour scale we created above\nggsave(\"figures/penguins_mismatchedgestalt.png\", width = 6, height = 3, units = \"in\")\n\n\n\n#### Day 2 ####\n\n# 1. Ineffective combinations: Luminance & shading -----------------------------\n\n# create the plot\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, \n                 col = species, # hue\n                 alpha = log(body_mass_g)), # luminance\n             size = 2.5) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       col = \"Species\", alpha = \"Body mass (g)\") +\n  scale_color_manual(values = sp_cols)\nggsave(\"figures/penguins_incompatible1.png\", width = 6, height = 3, units = \"in\")\n\n# 2. Ineffective combinations: Sizes and shapes --------------------------------\n\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, \n                 shape = species, # shape\n                 size = log(body_mass_g)), alpha = .7) + # size\n  scale_size(range = c(.1, 5)) + # make sure the sizes are scaled by area and not by radius\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       shape = \"Species\", size = \"Body mass (g)\") \nggsave(\"figures/penguins_incompatible2.png\", width = 6, height = 3, units = \"in\")\n\n# 3. Cognitive overload --------------------------------------------------------\n\n# get some nice colours from viridis (magma)\nsex_cols <- viridis::viridis_pal(option = \"magma\")(8)[c(3,6)]\n\nggplot(na.omit(penguins)) +\n  geom_point(aes(y = bill_length_mm, # dimension 1: position along y scale\n                 x = bill_depth_mm, # dimension 2: position along x scale\n                 shape = species, # dimension 3: shape\n                 size = log(body_mass_g), # dimension 4: size\n                 col = sex), # dimension 5: hue\n             alpha = .7) + # size\n  scale_size(range = c(.1, 5)) + # make sure the sizes are scaled by area and not by radius\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       shape = \"Species\", size = \"Body mass (g)\", col = \"Sex\") +\n  scale_color_manual(values = sex_cols)\nggsave(\"figures/penguins_5dimensions.png\", width = 7, height = 4, units = \"in\")\n\n\n# 4. Panels -------------------------------------------------------------------\n\nggplot(na.omit(penguins)) +\n  geom_point(aes(y = bill_length_mm, # dimension 1: position along y scale\n                 x = bill_depth_mm, # dimension 2: position along x scale\n                 col = log(body_mass_g)), # dimension 3: hue\n             alpha = .7, size = 2) + \n  facet_wrap(~ species) + # dimension 4: species!\n  # this will create a separate panel for each species\n  # note: this also automatically uses the same axes for all panels! If you want \n  # axes to vary between panels, use the argument scales = \"free\"\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Body mass (g)\") +\n  scale_color_viridis_c(option = \"magma\", end = .9, direction = -1) +\n  theme_linedraw() + theme(panel.grid = element_blank()) # making the panels prettier\nggsave(\"figures/penguins_dimensions_facets.png\", width = 7, height = 4, units = \"in\")\n\n\n# 5. Interactive ---------------------------------------------------------------\n\np <- na.omit(penguins) %>%\n  ggplot(aes(y = bill_length_mm, \n             x = bill_depth_mm, \n             col = log(body_mass_g))) +\n  geom_point(size = 2, alpha = .7) + \n  facet_wrap(~ species) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Body mass (g)\") +\n  scale_color_viridis_c(option = \"magma\", end = .9, direction = -1) +\n  theme_linedraw() + theme(panel.grid = element_blank()) # making the panels prettier\np <- ggplotly(p)\n#setwd(\"figures\")\nhtmlwidgets::saveWidget(as_widget(p), \"figures/penguins_interactive.html\")\np\n```\n\n### Example figures\n\n```{r animated.volcano}\n# Script to make animated plot of volcano eruptions over time\n\n# Load libraries:\nlibrary(dplyr) # data manipulation\nlibrary(ggplot2) # plotting\nlibrary(gganimate) # animation\nlibrary(gifski) # creating gifs\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# function to floor a year to the decade\nfloor_decade = function(value){return(value - value %% 10)}\n\n# read data \neruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')\n\n# select top 5 most frequently exploding volcanoes\ntemp <- group_by(eruptions, volcano_name) %>% tally() \ntemp <- temp[order(temp$n, decreasing = TRUE),]\n\n# make a time series dataset (number of eruptions per year)\neruptions$start_decade = floor_decade(eruptions$start_year)\n\n# filter dataset to subset we want to visualize\ndf <- eruptions %>% \n  filter(between(start_decade, 1900, 2019)) %>%\n  filter(volcano_name %in% temp$volcano_name[1:5]) %>%\n  group_by(start_decade) %>%\n  count(volcano_name) %>% ungroup()\n\n# plot!\np <- ggplot(df, aes(x = start_decade, y = n, fill = volcano_name)) +\n  geom_area() +\n  geom_vline(aes(xintercept = start_decade)) + # line that follows the current decade\n  scale_fill_viridis_d(option = \"magma\", end = .8) +\n  labs(x = \"\", y = \"Number of eruptions\", fill = \"Volcano\",\n       title = 'Eruptions of the top 5 most frequently erupting volcanos worldwide') +\n  # gganimate part: reveals each decade\n  transition_reveal(start_decade) \nanimate(p, duration = 5, fps = 20, width = 800, height = 300, renderer = gifski_renderer())\n#anim_save(\"figures/volcano_eruptions.gif\")\n```\n\n```{r coffee.uncertainty}\n# Script to generate plots with various ways of representing uncertainty, based \n# Coffee & Code dataset from https://www.kaggle.com/devready/coffee-and-code/data\n\n# set-up & data manipulation ---------------------------------------------------\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(magrittr) # for piping\nlibrary(ggridges) # for density ridge plots\nlibrary(patchwork) # great package for \"patching\" plots together!\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# import data\ndf <- read.csv(\"data/coffee_code.csv\")\n\n# set labels to be used in all plots\ncoffee_labels <- labs(title = \"Does coffee help programmers code?\",\n                      x = \"Coffee while coding\", \n                      y = \"Time spent coding \\n(hours/day)\") \n\n# the variable CodingWithoutCoffee is negative, which is harder to understand\n# (i.e. \"No\" means they drink coffee...). So, let's transform it into a more \n# intuitive variable!\ndf$CodingWithCoffee <- gsub(\"No\", \"Usually\", df$CodingWithoutCoffee)\ndf$CodingWithCoffee <- gsub(\"Yes\", \"Rarely\\n or never\", df$CodingWithCoffee)\n# convert to factor and set levels so they show up in a logical order\ndf$CodingWithCoffee <- factor(df$CodingWithCoffee,\n                              levels = c(\"Rarely\\n or never\", \n                                         \"Sometimes\", \n                                         \"Usually\"))\n\n# calculate summary statistics for the variable of choice\ndf_summary <- group_by(df, CodingWithCoffee) %>%\n  summarise(\n    # mean\n    mean_codinghours = mean(CodingHours), \n    # standard deviation\n    sd_codinghours = sd(CodingHours), \n    # standard error\n    se_codinghours = sd(CodingHours)/sqrt(length(CodingHours)))\n\n\n# 1. Error bars (standard error) -----------------------------------------------\n\nggplot(df_summary) +\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - se_codinghours,\n                    ymax = mean_codinghours + se_codinghours), \n                width = .2) +\n  geom_point(aes(x = CodingWithCoffee, y = mean_codinghours), \n             size = 3) +\n  coffee_labels + ylim(0,10)\nggsave(\"figures/coffee_errorbars.png\", width = 5, height = 3, units = \"in\")\n\n# 2. Boxplot -------------------------------------------------------------------\n\nggplot(df) +\n  geom_boxplot(aes(x = CodingWithCoffee, y = CodingHours)) +\n  coffee_labels\nggsave(\"figures/coffee_boxplot.png\", width = 5, height = 3, units = \"in\")\n\n\n# 3. Error bar demonstration ---------------------------------------------------\n\n# get some nice colours from viridis (magma)\nerror_cols <- viridis::viridis_pal(option = \"magma\")(5)[2:4]\n# set labels to be used in the palette\nerror_labels = c(\"standard deviation\",\"95% confidence interval\",\"standard error\")\n\nggplot(df_summary) +\n  # show the raw data\n  geom_jitter(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours),\n              alpha = .5, width = .05, col = \"grey\") +\n  # standard deviation\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - sd_codinghours,\n                    ymax = mean_codinghours + sd_codinghours,\n                    col = \"SD\"), width = .2, lwd = 1) +\n  # 95% confidence interval\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - 1.96*se_codinghours,\n                    ymax = mean_codinghours + 1.96*se_codinghours, \n                    col = \"CI\"), width = .2, lwd = 1) +\n  # standard error\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - se_codinghours,\n                    ymax = mean_codinghours + se_codinghours, \n                    col = \"SE\"), width = .2, lwd = 1) +\n  geom_point(aes(x = CodingWithCoffee, y = mean_codinghours), \n             size = 3) +\n  coffee_labels + ylim(c(0,11)) +\n  # manual palette/legend set-up!\n  scale_colour_manual(name = \"Uncertainty metric\", \n                      values = c(SD = error_cols[1], \n                                 CI = error_cols[2], \n                                 SE = error_cols[3]),\n                      labels = error_labels) +\n  theme(legend.position = \"top\")\nggsave(\"figures/coffee_bars_demo.png\", width = 7, height = 5, units = \"in\")\n\n\n# 4. Jitter plot with violin ---------------------------------------------------\n\nggplot() +\n  geom_jitter(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours),\n              alpha = .5, width = .05, col = \"grey\") +\n  geom_violin(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours), alpha = 0) +\n  geom_linerange(data = df_summary,\n                 aes(x = CodingWithCoffee, \n                     ymin = mean_codinghours - se_codinghours,\n                     ymax = mean_codinghours + se_codinghours)) +\n  geom_point(data = df_summary, \n             aes(x = CodingWithCoffee, \n                 y = mean_codinghours), size = 3) +\n  coffee_labels\nggsave(\"figures/coffee_violin_jitter.png\", width = 5, height = 3, units = \"in\")\n\n\n# 5. Density ridge plot --------------------------------------------------------\n\nggplot(df) + \n  aes(y = CodingWithCoffee, x = CodingHours, fill = stat(x)) +\n  geom_density_ridges_gradient(scale = 1.9, size = .2, rel_min_height = 0.005) +\n  # colour palette (gradient according to CodingHours)\n  scale_fill_viridis_c(option = \"magma\", direction = -1) +\n  # remove legend - it's not necessary here!\n  theme(legend.position = \"none\") +\n  labs(title = coffee_labels$title, \n       x = coffee_labels$y, \n       y = \"Coffee \\nwhile coding\") + \n  theme(axis.title.y = element_text(angle=0, hjust = 1, vjust = .9, \n                                    margin = margin(t = 0, r = -50, b = 0, l = 0)))\nggsave(\"figures/coffee_density_ridges.png\", width = 5, height = 3, units = \"in\")\n\n# 6. Jitter vs. Rug plot ------------------------------------------------------------------\n\njitterplot <- ggplot(df, aes(x = CoffeeCupsPerDay, y = CodingHours)) +\n  geom_jitter(alpha = .2) +\n  geom_smooth(fill = error_cols[1], col = \"black\", method = lm, lwd = .7) +\n  coffee_labels + ylim(c(0,11)) + labs(x = \"Cups of coffee (per day)\")\n\nrugplot <- ggplot(df, aes(x = CoffeeCupsPerDay, y = CodingHours)) +\n  geom_smooth(fill = error_cols[1], col = \"black\", method = lm, lwd = .7) +\n  geom_rug(position=\"jitter\", alpha = .7) + ylim(c(0,11)) +\n  coffee_labels + labs(x = \"Cups of coffee (per day)\")\n\n# patch the two plots together\njitterplot + rugplot\n#ggsave(\"figures/coffee_jitter_vs_rugplot.png\", width = 10, height = 4, units = \"in\")\n\n```\n\n```{r densiplot}\n# Script to generate 95% confidence intervals of a generated random normal distribution\n# as an example in Day 2: Visualizing uncertainty.\n\n# load library\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(dplyr)\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# set random seed\nset.seed(22)\n\n# generate population (random normal distribution)\ndf <- data.frame(\"value\" = rnorm(50, mean = 0, sd = 1))\n\n# descriptive stats for each distribution\ndesc_stats = df %>% \n  summarise(mean_val = mean(value, na.rm = TRUE),\n            se_val = sqrt(var(value)/length(value)))\n\n# build density plot!\np <- ggplot(data = df, aes(x = value, y = ..count..)) +\n  geom_density(alpha = .2, lwd = .3) +\n  xlim(c(min(df$value-1), max(df$value+1))) \n# extract plotted values\nbase_p <- ggplot_build(p)$data[[1]]\n# shade the 95% confidence interval\np + \n  geom_area(data = subset(base_p, \n                          between(x, \n                                  left = (desc_stats$mean_val - 1.96*desc_stats$se_val),\n                                  right = (desc_stats$mean_val + 1.96*desc_stats$se_val))),\n            aes(x = x, y = y), fill = \"cadetblue3\", alpha = .6) +\n  # add vertical line to show population mean\n  geom_vline(aes(xintercept = 0), lty = 2) +\n  annotate(\"text\", x = 0.9, y = 19, label = \"True mean\", fontface = \"italic\") +\n  # label axis!\n  labs(x = \"Variable of interest\", y = \"\") \n#ggsave(\"figures/confidenceinterval_example.png\", width = 5, height = 3.5, units = \"in\")\n\n```\n\n### Annotated resource library\n\nThis is an annotated library of data visualization resources we used to build the BIOS² Data Visualization Training, as well as some bonus resources we didn't have the time to include. Feel free to save this page as a reference for your data visualization adventures!\n\n------------------------------------------------------------------------\n\n#### Books & articles\n\n[**Fundamentals of Data Visualization**](https://serialmentor.com/dataviz/)<br> A primer on making informative and compelling figures. This is the website for the book \"Fundamentals of Data Visualization\" by Claus O. Wilke, published by O'Reilly Media, Inc.\n\n[**Data Visualization: A practical introduction**](https://socviz.co/index.html#preface)<br> An accessible primer on how to create effective graphics from data using R (mainly ggplot). This book provides a hands-on introduction to the principles and practice of data visualization, explaining what makes some graphs succeed while others fail, how to make high-quality figures from data using powerful and reproducible methods, and how to think about data visualization in an honest and effective way.\n\n[**Data Science Design (Chapter 6: Visualizing Data)**](https://link.springer.com/content/pdf/10.1007%2F978-3-319-55444-0.pdf)<br> Covers the principles that make standard plot designs work, show how they can be misleading if not properly used, and develop a sense of when graphs might be lying, and how to construct better ones.\n\n[**Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods**](https://www.jstor.org/stable/2288400)<br> Cleveland, William S., and Robert McGill. \"Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods.\" Journal of the American Statistical Association, vol. 79, no. 387, 1984, pp. 531--554. JSTOR, www.jstor.org/stable/2288400. Accessed 9 Oct. 2020.\n\n[**Graphical Perception and Graphical Methods for Analyzing Scientific Data**](10.1126/science.229.4716.828)<br> Cleveland, William S., and Robert McGill. \"Graphical perception and graphical methods for analyzing scientific data.\" Science 229.4716 (1985): 828-833.\n\n[**From Static to Interactive: Transforming Data Visualization to Improve Transparency**](https://doi.org/10.1371/journal.pbio.1002484)<br> Weissgerber TL, Garovic VD, Savic M, Winham SJ, Milic NM (2016) designed an interactive line graph that demonstrates how dynamic alternatives to static graphics for small sample size studies allow for additional exploration of empirical datasets. This [simple, free, web-based tool](http://statistika.mfub.bg.ac.rs/interactive-graph/) demonstrates the overall concept and may promote widespread use of interactive graphics.\n\n[**Data visualization: ambiguity as a fellow traveler**](https://doi.org/10.1038/nmeth.2530)<br> Research that is being done about how to visualize uncertainty in data visualizations. Marx, V. Nat Methods 10, 613--615 (2013). <https://doi.org/10.1038/nmeth.2530>\n\n[**Data visualization standards**](https://xdgov.github.io/data-design-standards/)<br> Collection of guidance and resources to help create better data visualizations with less effort.\n\n------------------------------------------------------------------------\n\n#### Design principles\n\n[**Gestalt Principles for Data Visualization: Similarity, Proximity & Enclosure**](http://emeeks.github.io/gestaltdataviz/section1.html)<br> Short visual guide to the Gestalt Principles.\n\n[**Why scientists need to be better at data visualization**](https://www.knowablemagazine.org/article/mind/2019/science-data-visualization?utm_campaign=2019-11-17)<br> A great overview of principles that could improve how we visualize scientific data and results.\n\n[**A collection of graphic pitfalls**](https://www.data-to-viz.com/caveats.html)<br> A collection of short articles about common issues with data visualizations that can mislead or obscure your message.\n\n------------------------------------------------------------------------\n\n#### Choosing a visualization\n\n[**Data Viz Project**](https://datavizproject.com/)<br> This is a great place to get inspiration and guidance about how to choose an appropriate visualization. There are many visualizations we are not used to seeing in ecology!\n\n[**From data to Viz \\| Find the graphic you need**](https://www.data-to-viz.com/)<br> Interactive tool to choose an appropriate visualization type for your data.\n\n------------------------------------------------------------------------\n\n#### Colour\n\n[**What to consider when choosing colors for data visualization**](https://blog.datawrapper.de/colors/)<br> A short, visual guide on things to keep in mind when using colour, such as when and how to use colour gradients, the colour grey, etc.\n\n[**ColorBrewer: Color Advice for Maps**](https://colorbrewer2.org/)<br> Tool to generate colour palettes for visualizations with colorblind-friendly options. You can also use these palettes in R using the [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/index.html) package, and the `scale_*_brewer()` (for discrete palettes) or `scale_*_distiller()` (for continuous palettes) functions in ggplot2.\n\n[**Color.review**](https://color.review/)<br> Tool to pick or verify colour palettes with high relative contrast between colours, to ensure your information is readable for everyone.\n\n[**Coblis --- Color Blindness Simulator**](https://www.color-blindness.com/coblis-color-blindness-simulator/)<br> Tool to upload an image and view it as they would appear to a colorblind person, with the option to simulate several color-vision deficiencies.\n\n[**500+ Named Colours with rgb and hex values**](http://cloford.com/resources/colours/500col.htm)<br> List of named colours along with their hex values.\n\n[**CartoDB/CartoColor**](https://github.com/CartoDB/cartocolor)<br> CARTOColors are a set of custom color palettes built on top of well-known standards for color use on maps, with next generation enhancements for the web and CARTO basemaps. Choose from a selection of sequential, diverging, or qualitative schemes for your next CARTO powered visualization using their [online module](https://carto.com/carto-colors/).\n\n------------------------------------------------------------------------\n\n#### Tools\n\n##### R\n\n[**The R Graph Gallery**](https://www.r-graph-gallery.com/index.html)<br> A collection of charts made with the R programming language. Hundreds of charts are displayed in several sections, always with their reproducible code available. The gallery makes a focus on the tidyverse and ggplot2.\n\n###### Base R {.unnumbered}\n\n[**Cheatsheet: Margins in base R**](https://www.r-graph-gallery.com/74-margin-and-oma-cheatsheet)<br> Edit your margins in base R to accommodate axis titles, legends, captions, etc.!\n\n[**Customizing tick marks in base R**](https://insileco.github.io/2020/08/29/custom-tick-marks-with-rs-base-graphics-system/)<br> Seems like a simple thing, but it can be so frustrating! This is a great post about customizing tick marks with base plot in R.\n\n[**Animations in R (for time series)**](https://insileco.github.io/2017/07/05/animations-in-r-time-series-of-erythemal-irradiance-in-the-st.-lawrence/)<br> If you want to use animations but don't want to use ggplot2, this demo might help you!\n\n###### ggplot2 {.unnumbered}\n\n[**Cheatsheet: ggplot2**](http://r-statistics.co/ggplot2-cheatsheet.html)<br> Cheatsheet for ggplot2 in R - anything you want to do is probably covered here!\n\n[**Coding Club tutorial: Data Viz Part 1 - Beautiful and informative data visualization**](https://ourcodingclub.github.io/tutorials/datavis/)<br> Great tutorial demonstrating how to customize titles, subtitles, captions, labels, colour palettes, and themes in ggplot2.\n\n[**Coding Club tutorial: Data Viz Part 2 - Customizing your figures**](https://ourcodingclub.github.io/tutorials/data-vis-2/)<br> Great tutorial demonstrating how to customize titles, subtitles, captions, labels, colour palettes, and themes in ggplot2.\n\n[**ggplot flipbook**](https://evamaerey.github.io/ggplot_flipbook/ggplot_flipbook_xaringan.html#1)<br> A flipbook-style demonstration that builds and customizes plots line by line using ggplot in R.\n\n[**gganimate: A Grammar of Animated Graphics**](https://github.com/thomasp85/gganimate)<br> Package to create animated graphics in R (with ggplot2).\n\n##### Python\n\n[**The Python Graph Gallery**](https://python-graph-gallery.com/)<br> This website displays hundreds of charts, always providing the reproducible python code.\n\n[**Python Tutorial: Intro to Matplotlib**](https://github.com/Randonnees-Datatrek/data-trek-2020/blob/master/Tutorials/Python_Tutorial/python_tutorial.ipynb)<br> Introduction to basic functionalities of the Python's library Matplotlib covering basic plots, plot attributes, subplots and plotting the `iris` dataset.\n\n[**The Art of Effective Visualization of Multi-dimensional Data**](https://towardsdatascience.com/the-art-of-effective-visualization-of-multi-dimensional-data-6c7202990c57)<br> Covers both univariate (one-dimension) and multivariate (multi-dimensional) data visualization strategies using the Python machine learning ecosystem.\n\n##### Julia\n\n[**Julia Plots Gallery**](https://goropikari.github.io/PlotsGallery.jl/)<br> Display of various plots with reproducible code in Julia.\n\n[**Plots in Julia**](http://docs.juliaplots.org/latest/#Plots-powerful-convenience-for-visualization-in-Julia)<br> Documentation for the Plots package in Julia, including demonstrations for animated plots, and links to tutorials.\n\n[**Animations in Julia**](http://docs.juliaplots.org/latest/animations/)<br> How to start making animated plots in Julia.\n\n------------------------------------------------------------------------\n\n#### Customization\n\n[**Chart Studio**](https://plotly.com/chart-studio/)<br> Web editor to create interactive plots with plotly. You can download the image as .html, or static images, without coding the figure yourself.\n\n[**PhyloPic**](http://phylopic.org/)<br> Vector images of living organisms. This is great for ecologists who want to add silhouettes of their organisms onto their plots - search anything, and you will likely find it!\n\n[**Add icons on your R plot**](https://insileco.github.io/2017/05/23/add-icons-on-your-r-plot/)<br> Add special icons to your plot as a great way to customize it, and save space with labels!\n\n------------------------------------------------------------------------\n\n#### Inspiration (pretty things!)\n\n[**Information is Beautiful**](https://informationisbeautiful.net/visualizations/)<br> Collection of beautiful original visualizations about a variety of topics!\n\n[**TidyTuesday**](https://github.com/rfordatascience/tidytuesday)<br> A weekly data project aimed at the R ecosystem, where people wrangle and visualize data in loads of creative ways. Browse what people have created ([#TidyTuesday](https://twitter.com/search?q=%23TidyTuesday) on Twitter is great too!), and the visualizations that have inspired each week's theme.\n\n[**Wind currents on Earth**](https://earth.nullschool.net/)<br> Dynamic and interactive map of wind currents on Earth.\n\n[**A Day in the Life of Americans**](https://flowingdata.com/2015/12/15/a-day-in-the-life-of-americans/)<br> Dynamic visualisation of how Americans spend their time in an average day.\n\n[**2019: The Year in Visual Stories and Graphics**](https://www.nytimes.com/interactive/2019/12/30/us/2019-year-in-graphics.html)<br> Collection of the most popular visualizations by the New York Times in 2019.\n","srcMarkdownNoYaml":"\n\nWelcome!\n\nThis training covers the general principles of visualization and graphic design, and techniques of tailored visualization. More specifically, the objectives of the training are:\n\n-   Make an overview of basic data visualization principles, including shapes, sizes, colours, and fonts.\n-   Discuss how to choose the right visualization for your data, what you want to communicate, and who you want to communicate to.\n-   Tools and principles to tailor visualizations, particularly in making interpretable, interactive, and honest visualizations.\n\n## Training material\n\n*Click on \"Show code\" to learn how to do each plot!*\n\n### Interactive examples\n\n```{r, echo = FALSE, results='hide'}\n# install packages if not installed already\nlist.of.packages <- c(\"ggplot2\", \"dplyr\", \"plotly\", \"lubridate\", \"htmlwidgets\", \"viridis\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n\nif(!(\"streamgraph\" %in% installed.packages())){\n  devtools::install_github(\"hrbrmstr/streamgraph\", quiet = TRUE)}\n```\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(plotly) # interactive plots\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n```\n\n#### Streamgraph\n\n```{r streamgraph-plot}\n# Script to make a streamgraph of the top 10 most popular dog breeds in \n# New York City from 1999 to 2015\n\n# load libraries\nlibrary(lubridate) # dealing with dates\nlibrary(dplyr) # data manipulation\nlibrary(streamgraph) #devtools::install_github(\"hrbrmstr/streamgraph\")\nlibrary(htmlwidgets) # to save the widget!\n\n# load the dataset\n# more information about this dataset can be found here:\n# https://www.kaggle.com/smithaachar/nyc-dog-licensing-clean\nnyc_dogs <- read.csv(\"data/nyc_dogs.csv\")\n\n# convert birth year to date format (and keep only the year)\nnyc_dogs$AnimalBirthYear <- mdy_hms(nyc_dogs$AnimalBirthMonth) %>% year()\n\n# identify 10 most common dogs\ntopdogs <- nyc_dogs %>% count(BreedName) \ntopdogs <- topdogs[order(topdogs$n, decreasing = TRUE),]\n# keep 10 most common breeds (and remove last year of data which is incomplete)\ndf <- filter(nyc_dogs, BreedName %in% topdogs$BreedName[2:11] & AnimalBirthYear < 2016) %>% \n  group_by(AnimalBirthYear) %>% \n  count(BreedName) %>% ungroup()\n\n# get some nice colours from viridis (magma)\ncols <- viridis::viridis_pal(option = \"magma\")(length(unique(df$BreedName)))\n\n# make streamgraph!\npp <- streamgraph(df, \n                  key = BreedName, value = n, date = AnimalBirthYear, \n                  height=\"600px\", width=\"1000px\") %>%\n  sg_legend(show=TRUE, label=\"names: \") %>%\n  sg_fill_manual(values = cols) \n# saveWidget(pp, file=paste0(getwd(), \"/figures/dogs_streamgraph.html\"))\n\n# plot\npp\n```\n\n------------------------------------------------------------------------\n\n#### Interactive plot\n\n```{r interactive-plot, message=FALSE}\n# Script to generate plots to demonstrate how combinations of information dimensions\n# can become overwhelming and difficult to interpret.\n\n# set-up & data manipulation ---------------------------------------------------\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(magrittr) # for piping\nlibrary(plotly) # interactive plots\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# import data\n# more info on this dataset: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-07-28/readme.md\npenguins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv') \n\n# get some nice colours from viridis (magma)\nsp_cols <- viridis::viridis_pal(option = \"magma\")(5)[2:4]\n\n\n#### Day 1 ####\n\n# 1. Similarity\n\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, col = species), size = 2.5) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Species\") + # labels\n  scale_color_manual(values = sp_cols) # sets the colour scale we created above \nggsave(\"figures/penguins_similarity.png\", width = 6, height = 3, units = \"in\")\n\n# 2. Proximity\n\ndf <- penguins %>% group_by(sex, species) %>% \n  summarise(mean_mass = mean(body_mass_g, na.rm = TRUE)) %>% na.omit() \nggplot(df) +\n  geom_bar(aes(y = mean_mass, x = species, fill = sex), \n           position = \"dodge\", stat = \"identity\") +\n  labs(x = \"Species\", y = \"Mean body mass (g)\", col = \"Sex\") + # labels\n  scale_fill_manual(values = sp_cols) # sets the colour scale we created above\nggsave(\"figures/penguins_proximity.png\", width = 6, height = 3, units = \"in\")\n\n# 3. Enclosure (Ellipses over a fake PCA)\nggplot(data = penguins, \n       aes(y = bill_length_mm, x = bill_depth_mm)) +\n  geom_point(size = 2.1, col = \"grey30\") +\n  stat_ellipse(aes(col = species), lwd = .7) +\n  labs(x = \"PCA1\", y = \"PCA2\", col = \"Species\") + # labels\n  scale_color_manual(values = sp_cols) + # sets the colour scale we created above\n  theme(axis.text = element_blank(), axis.ticks = element_blank())\nggsave(\"figures/penguins_enclosure.png\", width = 6, height = 3, units = \"in\")\n\n# 4. Mismatched combination of principles\ntemp_palette <- rev(c(sp_cols, \"#1f78b4\", \"#33a02c\"))\nggplot(data = penguins, \n       aes(y = bill_length_mm, x = bill_depth_mm)) +\n  geom_point(aes(col = sex), size = 2.1) +\n  stat_ellipse(aes(col = species), lwd = .7) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"?\") + # labels\n  scale_color_manual(values = temp_palette) # sets the colour scale we created above\nggsave(\"figures/penguins_mismatchedgestalt.png\", width = 6, height = 3, units = \"in\")\n\n\n\n#### Day 2 ####\n\n# 1. Ineffective combinations: Luminance & shading -----------------------------\n\n# create the plot\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, \n                 col = species, # hue\n                 alpha = log(body_mass_g)), # luminance\n             size = 2.5) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       col = \"Species\", alpha = \"Body mass (g)\") +\n  scale_color_manual(values = sp_cols)\nggsave(\"figures/penguins_incompatible1.png\", width = 6, height = 3, units = \"in\")\n\n# 2. Ineffective combinations: Sizes and shapes --------------------------------\n\nggplot(penguins) +\n  geom_point(aes(y = bill_length_mm, x = bill_depth_mm, \n                 shape = species, # shape\n                 size = log(body_mass_g)), alpha = .7) + # size\n  scale_size(range = c(.1, 5)) + # make sure the sizes are scaled by area and not by radius\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       shape = \"Species\", size = \"Body mass (g)\") \nggsave(\"figures/penguins_incompatible2.png\", width = 6, height = 3, units = \"in\")\n\n# 3. Cognitive overload --------------------------------------------------------\n\n# get some nice colours from viridis (magma)\nsex_cols <- viridis::viridis_pal(option = \"magma\")(8)[c(3,6)]\n\nggplot(na.omit(penguins)) +\n  geom_point(aes(y = bill_length_mm, # dimension 1: position along y scale\n                 x = bill_depth_mm, # dimension 2: position along x scale\n                 shape = species, # dimension 3: shape\n                 size = log(body_mass_g), # dimension 4: size\n                 col = sex), # dimension 5: hue\n             alpha = .7) + # size\n  scale_size(range = c(.1, 5)) + # make sure the sizes are scaled by area and not by radius\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n       shape = \"Species\", size = \"Body mass (g)\", col = \"Sex\") +\n  scale_color_manual(values = sex_cols)\nggsave(\"figures/penguins_5dimensions.png\", width = 7, height = 4, units = \"in\")\n\n\n# 4. Panels -------------------------------------------------------------------\n\nggplot(na.omit(penguins)) +\n  geom_point(aes(y = bill_length_mm, # dimension 1: position along y scale\n                 x = bill_depth_mm, # dimension 2: position along x scale\n                 col = log(body_mass_g)), # dimension 3: hue\n             alpha = .7, size = 2) + \n  facet_wrap(~ species) + # dimension 4: species!\n  # this will create a separate panel for each species\n  # note: this also automatically uses the same axes for all panels! If you want \n  # axes to vary between panels, use the argument scales = \"free\"\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Body mass (g)\") +\n  scale_color_viridis_c(option = \"magma\", end = .9, direction = -1) +\n  theme_linedraw() + theme(panel.grid = element_blank()) # making the panels prettier\nggsave(\"figures/penguins_dimensions_facets.png\", width = 7, height = 4, units = \"in\")\n\n\n# 5. Interactive ---------------------------------------------------------------\n\np <- na.omit(penguins) %>%\n  ggplot(aes(y = bill_length_mm, \n             x = bill_depth_mm, \n             col = log(body_mass_g))) +\n  geom_point(size = 2, alpha = .7) + \n  facet_wrap(~ species) +\n  labs(x = \"Bill depth (mm)\", y = \"Bill length (mm)\", col = \"Body mass (g)\") +\n  scale_color_viridis_c(option = \"magma\", end = .9, direction = -1) +\n  theme_linedraw() + theme(panel.grid = element_blank()) # making the panels prettier\np <- ggplotly(p)\n#setwd(\"figures\")\nhtmlwidgets::saveWidget(as_widget(p), \"figures/penguins_interactive.html\")\np\n```\n\n### Example figures\n\n```{r animated.volcano}\n# Script to make animated plot of volcano eruptions over time\n\n# Load libraries:\nlibrary(dplyr) # data manipulation\nlibrary(ggplot2) # plotting\nlibrary(gganimate) # animation\nlibrary(gifski) # creating gifs\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# function to floor a year to the decade\nfloor_decade = function(value){return(value - value %% 10)}\n\n# read data \neruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')\n\n# select top 5 most frequently exploding volcanoes\ntemp <- group_by(eruptions, volcano_name) %>% tally() \ntemp <- temp[order(temp$n, decreasing = TRUE),]\n\n# make a time series dataset (number of eruptions per year)\neruptions$start_decade = floor_decade(eruptions$start_year)\n\n# filter dataset to subset we want to visualize\ndf <- eruptions %>% \n  filter(between(start_decade, 1900, 2019)) %>%\n  filter(volcano_name %in% temp$volcano_name[1:5]) %>%\n  group_by(start_decade) %>%\n  count(volcano_name) %>% ungroup()\n\n# plot!\np <- ggplot(df, aes(x = start_decade, y = n, fill = volcano_name)) +\n  geom_area() +\n  geom_vline(aes(xintercept = start_decade)) + # line that follows the current decade\n  scale_fill_viridis_d(option = \"magma\", end = .8) +\n  labs(x = \"\", y = \"Number of eruptions\", fill = \"Volcano\",\n       title = 'Eruptions of the top 5 most frequently erupting volcanos worldwide') +\n  # gganimate part: reveals each decade\n  transition_reveal(start_decade) \nanimate(p, duration = 5, fps = 20, width = 800, height = 300, renderer = gifski_renderer())\n#anim_save(\"figures/volcano_eruptions.gif\")\n```\n\n```{r coffee.uncertainty}\n# Script to generate plots with various ways of representing uncertainty, based \n# Coffee & Code dataset from https://www.kaggle.com/devready/coffee-and-code/data\n\n# set-up & data manipulation ---------------------------------------------------\n\n# load packages\nlibrary(ggplot2) # for plots, built layer by layer\nlibrary(dplyr) # for data manipulation\nlibrary(magrittr) # for piping\nlibrary(ggridges) # for density ridge plots\nlibrary(patchwork) # great package for \"patching\" plots together!\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# import data\ndf <- read.csv(\"data/coffee_code.csv\")\n\n# set labels to be used in all plots\ncoffee_labels <- labs(title = \"Does coffee help programmers code?\",\n                      x = \"Coffee while coding\", \n                      y = \"Time spent coding \\n(hours/day)\") \n\n# the variable CodingWithoutCoffee is negative, which is harder to understand\n# (i.e. \"No\" means they drink coffee...). So, let's transform it into a more \n# intuitive variable!\ndf$CodingWithCoffee <- gsub(\"No\", \"Usually\", df$CodingWithoutCoffee)\ndf$CodingWithCoffee <- gsub(\"Yes\", \"Rarely\\n or never\", df$CodingWithCoffee)\n# convert to factor and set levels so they show up in a logical order\ndf$CodingWithCoffee <- factor(df$CodingWithCoffee,\n                              levels = c(\"Rarely\\n or never\", \n                                         \"Sometimes\", \n                                         \"Usually\"))\n\n# calculate summary statistics for the variable of choice\ndf_summary <- group_by(df, CodingWithCoffee) %>%\n  summarise(\n    # mean\n    mean_codinghours = mean(CodingHours), \n    # standard deviation\n    sd_codinghours = sd(CodingHours), \n    # standard error\n    se_codinghours = sd(CodingHours)/sqrt(length(CodingHours)))\n\n\n# 1. Error bars (standard error) -----------------------------------------------\n\nggplot(df_summary) +\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - se_codinghours,\n                    ymax = mean_codinghours + se_codinghours), \n                width = .2) +\n  geom_point(aes(x = CodingWithCoffee, y = mean_codinghours), \n             size = 3) +\n  coffee_labels + ylim(0,10)\nggsave(\"figures/coffee_errorbars.png\", width = 5, height = 3, units = \"in\")\n\n# 2. Boxplot -------------------------------------------------------------------\n\nggplot(df) +\n  geom_boxplot(aes(x = CodingWithCoffee, y = CodingHours)) +\n  coffee_labels\nggsave(\"figures/coffee_boxplot.png\", width = 5, height = 3, units = \"in\")\n\n\n# 3. Error bar demonstration ---------------------------------------------------\n\n# get some nice colours from viridis (magma)\nerror_cols <- viridis::viridis_pal(option = \"magma\")(5)[2:4]\n# set labels to be used in the palette\nerror_labels = c(\"standard deviation\",\"95% confidence interval\",\"standard error\")\n\nggplot(df_summary) +\n  # show the raw data\n  geom_jitter(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours),\n              alpha = .5, width = .05, col = \"grey\") +\n  # standard deviation\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - sd_codinghours,\n                    ymax = mean_codinghours + sd_codinghours,\n                    col = \"SD\"), width = .2, lwd = 1) +\n  # 95% confidence interval\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - 1.96*se_codinghours,\n                    ymax = mean_codinghours + 1.96*se_codinghours, \n                    col = \"CI\"), width = .2, lwd = 1) +\n  # standard error\n  geom_errorbar(aes(x = CodingWithCoffee, \n                    ymin = mean_codinghours - se_codinghours,\n                    ymax = mean_codinghours + se_codinghours, \n                    col = \"SE\"), width = .2, lwd = 1) +\n  geom_point(aes(x = CodingWithCoffee, y = mean_codinghours), \n             size = 3) +\n  coffee_labels + ylim(c(0,11)) +\n  # manual palette/legend set-up!\n  scale_colour_manual(name = \"Uncertainty metric\", \n                      values = c(SD = error_cols[1], \n                                 CI = error_cols[2], \n                                 SE = error_cols[3]),\n                      labels = error_labels) +\n  theme(legend.position = \"top\")\nggsave(\"figures/coffee_bars_demo.png\", width = 7, height = 5, units = \"in\")\n\n\n# 4. Jitter plot with violin ---------------------------------------------------\n\nggplot() +\n  geom_jitter(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours),\n              alpha = .5, width = .05, col = \"grey\") +\n  geom_violin(data = df, aes(x = CodingWithCoffee, \n                             y = CodingHours), alpha = 0) +\n  geom_linerange(data = df_summary,\n                 aes(x = CodingWithCoffee, \n                     ymin = mean_codinghours - se_codinghours,\n                     ymax = mean_codinghours + se_codinghours)) +\n  geom_point(data = df_summary, \n             aes(x = CodingWithCoffee, \n                 y = mean_codinghours), size = 3) +\n  coffee_labels\nggsave(\"figures/coffee_violin_jitter.png\", width = 5, height = 3, units = \"in\")\n\n\n# 5. Density ridge plot --------------------------------------------------------\n\nggplot(df) + \n  aes(y = CodingWithCoffee, x = CodingHours, fill = stat(x)) +\n  geom_density_ridges_gradient(scale = 1.9, size = .2, rel_min_height = 0.005) +\n  # colour palette (gradient according to CodingHours)\n  scale_fill_viridis_c(option = \"magma\", direction = -1) +\n  # remove legend - it's not necessary here!\n  theme(legend.position = \"none\") +\n  labs(title = coffee_labels$title, \n       x = coffee_labels$y, \n       y = \"Coffee \\nwhile coding\") + \n  theme(axis.title.y = element_text(angle=0, hjust = 1, vjust = .9, \n                                    margin = margin(t = 0, r = -50, b = 0, l = 0)))\nggsave(\"figures/coffee_density_ridges.png\", width = 5, height = 3, units = \"in\")\n\n# 6. Jitter vs. Rug plot ------------------------------------------------------------------\n\njitterplot <- ggplot(df, aes(x = CoffeeCupsPerDay, y = CodingHours)) +\n  geom_jitter(alpha = .2) +\n  geom_smooth(fill = error_cols[1], col = \"black\", method = lm, lwd = .7) +\n  coffee_labels + ylim(c(0,11)) + labs(x = \"Cups of coffee (per day)\")\n\nrugplot <- ggplot(df, aes(x = CoffeeCupsPerDay, y = CodingHours)) +\n  geom_smooth(fill = error_cols[1], col = \"black\", method = lm, lwd = .7) +\n  geom_rug(position=\"jitter\", alpha = .7) + ylim(c(0,11)) +\n  coffee_labels + labs(x = \"Cups of coffee (per day)\")\n\n# patch the two plots together\njitterplot + rugplot\n#ggsave(\"figures/coffee_jitter_vs_rugplot.png\", width = 10, height = 4, units = \"in\")\n\n```\n\n```{r densiplot}\n# Script to generate 95% confidence intervals of a generated random normal distribution\n# as an example in Day 2: Visualizing uncertainty.\n\n# load library\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(dplyr)\n\n# set ggplot theme\ntheme_set(theme_classic() +\n            theme(axis.title = element_text(size = 11, face = \"bold\"),\n                  axis.text = element_text(size = 11),\n                  plot.title = element_text(size = 13, face = \"bold\"),\n                  legend.title = element_text(size = 11, face = \"bold\"),\n                  legend.text = element_text(size = 10)))\n\n# set random seed\nset.seed(22)\n\n# generate population (random normal distribution)\ndf <- data.frame(\"value\" = rnorm(50, mean = 0, sd = 1))\n\n# descriptive stats for each distribution\ndesc_stats = df %>% \n  summarise(mean_val = mean(value, na.rm = TRUE),\n            se_val = sqrt(var(value)/length(value)))\n\n# build density plot!\np <- ggplot(data = df, aes(x = value, y = ..count..)) +\n  geom_density(alpha = .2, lwd = .3) +\n  xlim(c(min(df$value-1), max(df$value+1))) \n# extract plotted values\nbase_p <- ggplot_build(p)$data[[1]]\n# shade the 95% confidence interval\np + \n  geom_area(data = subset(base_p, \n                          between(x, \n                                  left = (desc_stats$mean_val - 1.96*desc_stats$se_val),\n                                  right = (desc_stats$mean_val + 1.96*desc_stats$se_val))),\n            aes(x = x, y = y), fill = \"cadetblue3\", alpha = .6) +\n  # add vertical line to show population mean\n  geom_vline(aes(xintercept = 0), lty = 2) +\n  annotate(\"text\", x = 0.9, y = 19, label = \"True mean\", fontface = \"italic\") +\n  # label axis!\n  labs(x = \"Variable of interest\", y = \"\") \n#ggsave(\"figures/confidenceinterval_example.png\", width = 5, height = 3.5, units = \"in\")\n\n```\n\n### Annotated resource library\n\nThis is an annotated library of data visualization resources we used to build the BIOS² Data Visualization Training, as well as some bonus resources we didn't have the time to include. Feel free to save this page as a reference for your data visualization adventures!\n\n------------------------------------------------------------------------\n\n#### Books & articles\n\n[**Fundamentals of Data Visualization**](https://serialmentor.com/dataviz/)<br> A primer on making informative and compelling figures. This is the website for the book \"Fundamentals of Data Visualization\" by Claus O. Wilke, published by O'Reilly Media, Inc.\n\n[**Data Visualization: A practical introduction**](https://socviz.co/index.html#preface)<br> An accessible primer on how to create effective graphics from data using R (mainly ggplot). This book provides a hands-on introduction to the principles and practice of data visualization, explaining what makes some graphs succeed while others fail, how to make high-quality figures from data using powerful and reproducible methods, and how to think about data visualization in an honest and effective way.\n\n[**Data Science Design (Chapter 6: Visualizing Data)**](https://link.springer.com/content/pdf/10.1007%2F978-3-319-55444-0.pdf)<br> Covers the principles that make standard plot designs work, show how they can be misleading if not properly used, and develop a sense of when graphs might be lying, and how to construct better ones.\n\n[**Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods**](https://www.jstor.org/stable/2288400)<br> Cleveland, William S., and Robert McGill. \"Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods.\" Journal of the American Statistical Association, vol. 79, no. 387, 1984, pp. 531--554. JSTOR, www.jstor.org/stable/2288400. Accessed 9 Oct. 2020.\n\n[**Graphical Perception and Graphical Methods for Analyzing Scientific Data**](10.1126/science.229.4716.828)<br> Cleveland, William S., and Robert McGill. \"Graphical perception and graphical methods for analyzing scientific data.\" Science 229.4716 (1985): 828-833.\n\n[**From Static to Interactive: Transforming Data Visualization to Improve Transparency**](https://doi.org/10.1371/journal.pbio.1002484)<br> Weissgerber TL, Garovic VD, Savic M, Winham SJ, Milic NM (2016) designed an interactive line graph that demonstrates how dynamic alternatives to static graphics for small sample size studies allow for additional exploration of empirical datasets. This [simple, free, web-based tool](http://statistika.mfub.bg.ac.rs/interactive-graph/) demonstrates the overall concept and may promote widespread use of interactive graphics.\n\n[**Data visualization: ambiguity as a fellow traveler**](https://doi.org/10.1038/nmeth.2530)<br> Research that is being done about how to visualize uncertainty in data visualizations. Marx, V. Nat Methods 10, 613--615 (2013). <https://doi.org/10.1038/nmeth.2530>\n\n[**Data visualization standards**](https://xdgov.github.io/data-design-standards/)<br> Collection of guidance and resources to help create better data visualizations with less effort.\n\n------------------------------------------------------------------------\n\n#### Design principles\n\n[**Gestalt Principles for Data Visualization: Similarity, Proximity & Enclosure**](http://emeeks.github.io/gestaltdataviz/section1.html)<br> Short visual guide to the Gestalt Principles.\n\n[**Why scientists need to be better at data visualization**](https://www.knowablemagazine.org/article/mind/2019/science-data-visualization?utm_campaign=2019-11-17)<br> A great overview of principles that could improve how we visualize scientific data and results.\n\n[**A collection of graphic pitfalls**](https://www.data-to-viz.com/caveats.html)<br> A collection of short articles about common issues with data visualizations that can mislead or obscure your message.\n\n------------------------------------------------------------------------\n\n#### Choosing a visualization\n\n[**Data Viz Project**](https://datavizproject.com/)<br> This is a great place to get inspiration and guidance about how to choose an appropriate visualization. There are many visualizations we are not used to seeing in ecology!\n\n[**From data to Viz \\| Find the graphic you need**](https://www.data-to-viz.com/)<br> Interactive tool to choose an appropriate visualization type for your data.\n\n------------------------------------------------------------------------\n\n#### Colour\n\n[**What to consider when choosing colors for data visualization**](https://blog.datawrapper.de/colors/)<br> A short, visual guide on things to keep in mind when using colour, such as when and how to use colour gradients, the colour grey, etc.\n\n[**ColorBrewer: Color Advice for Maps**](https://colorbrewer2.org/)<br> Tool to generate colour palettes for visualizations with colorblind-friendly options. You can also use these palettes in R using the [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/index.html) package, and the `scale_*_brewer()` (for discrete palettes) or `scale_*_distiller()` (for continuous palettes) functions in ggplot2.\n\n[**Color.review**](https://color.review/)<br> Tool to pick or verify colour palettes with high relative contrast between colours, to ensure your information is readable for everyone.\n\n[**Coblis --- Color Blindness Simulator**](https://www.color-blindness.com/coblis-color-blindness-simulator/)<br> Tool to upload an image and view it as they would appear to a colorblind person, with the option to simulate several color-vision deficiencies.\n\n[**500+ Named Colours with rgb and hex values**](http://cloford.com/resources/colours/500col.htm)<br> List of named colours along with their hex values.\n\n[**CartoDB/CartoColor**](https://github.com/CartoDB/cartocolor)<br> CARTOColors are a set of custom color palettes built on top of well-known standards for color use on maps, with next generation enhancements for the web and CARTO basemaps. Choose from a selection of sequential, diverging, or qualitative schemes for your next CARTO powered visualization using their [online module](https://carto.com/carto-colors/).\n\n------------------------------------------------------------------------\n\n#### Tools\n\n##### R\n\n[**The R Graph Gallery**](https://www.r-graph-gallery.com/index.html)<br> A collection of charts made with the R programming language. Hundreds of charts are displayed in several sections, always with their reproducible code available. The gallery makes a focus on the tidyverse and ggplot2.\n\n###### Base R {.unnumbered}\n\n[**Cheatsheet: Margins in base R**](https://www.r-graph-gallery.com/74-margin-and-oma-cheatsheet)<br> Edit your margins in base R to accommodate axis titles, legends, captions, etc.!\n\n[**Customizing tick marks in base R**](https://insileco.github.io/2020/08/29/custom-tick-marks-with-rs-base-graphics-system/)<br> Seems like a simple thing, but it can be so frustrating! This is a great post about customizing tick marks with base plot in R.\n\n[**Animations in R (for time series)**](https://insileco.github.io/2017/07/05/animations-in-r-time-series-of-erythemal-irradiance-in-the-st.-lawrence/)<br> If you want to use animations but don't want to use ggplot2, this demo might help you!\n\n###### ggplot2 {.unnumbered}\n\n[**Cheatsheet: ggplot2**](http://r-statistics.co/ggplot2-cheatsheet.html)<br> Cheatsheet for ggplot2 in R - anything you want to do is probably covered here!\n\n[**Coding Club tutorial: Data Viz Part 1 - Beautiful and informative data visualization**](https://ourcodingclub.github.io/tutorials/datavis/)<br> Great tutorial demonstrating how to customize titles, subtitles, captions, labels, colour palettes, and themes in ggplot2.\n\n[**Coding Club tutorial: Data Viz Part 2 - Customizing your figures**](https://ourcodingclub.github.io/tutorials/data-vis-2/)<br> Great tutorial demonstrating how to customize titles, subtitles, captions, labels, colour palettes, and themes in ggplot2.\n\n[**ggplot flipbook**](https://evamaerey.github.io/ggplot_flipbook/ggplot_flipbook_xaringan.html#1)<br> A flipbook-style demonstration that builds and customizes plots line by line using ggplot in R.\n\n[**gganimate: A Grammar of Animated Graphics**](https://github.com/thomasp85/gganimate)<br> Package to create animated graphics in R (with ggplot2).\n\n##### Python\n\n[**The Python Graph Gallery**](https://python-graph-gallery.com/)<br> This website displays hundreds of charts, always providing the reproducible python code.\n\n[**Python Tutorial: Intro to Matplotlib**](https://github.com/Randonnees-Datatrek/data-trek-2020/blob/master/Tutorials/Python_Tutorial/python_tutorial.ipynb)<br> Introduction to basic functionalities of the Python's library Matplotlib covering basic plots, plot attributes, subplots and plotting the `iris` dataset.\n\n[**The Art of Effective Visualization of Multi-dimensional Data**](https://towardsdatascience.com/the-art-of-effective-visualization-of-multi-dimensional-data-6c7202990c57)<br> Covers both univariate (one-dimension) and multivariate (multi-dimensional) data visualization strategies using the Python machine learning ecosystem.\n\n##### Julia\n\n[**Julia Plots Gallery**](https://goropikari.github.io/PlotsGallery.jl/)<br> Display of various plots with reproducible code in Julia.\n\n[**Plots in Julia**](http://docs.juliaplots.org/latest/#Plots-powerful-convenience-for-visualization-in-Julia)<br> Documentation for the Plots package in Julia, including demonstrations for animated plots, and links to tutorials.\n\n[**Animations in Julia**](http://docs.juliaplots.org/latest/animations/)<br> How to start making animated plots in Julia.\n\n------------------------------------------------------------------------\n\n#### Customization\n\n[**Chart Studio**](https://plotly.com/chart-studio/)<br> Web editor to create interactive plots with plotly. You can download the image as .html, or static images, without coding the figure yourself.\n\n[**PhyloPic**](http://phylopic.org/)<br> Vector images of living organisms. This is great for ecologists who want to add silhouettes of their organisms onto their plots - search anything, and you will likely find it!\n\n[**Add icons on your R plot**](https://insileco.github.io/2017/05/23/add-icons-on-your-r-plot/)<br> Add special icons to your plot as a great way to customize it, and save space with labels!\n\n------------------------------------------------------------------------\n\n#### Inspiration (pretty things!)\n\n[**Information is Beautiful**](https://informationisbeautiful.net/visualizations/)<br> Collection of beautiful original visualizations about a variety of topics!\n\n[**TidyTuesday**](https://github.com/rfordatascience/tidytuesday)<br> A weekly data project aimed at the R ecosystem, where people wrangle and visualize data in loads of creative ways. Browse what people have created ([#TidyTuesday](https://twitter.com/search?q=%23TidyTuesday) on Twitter is great too!), and the visualizations that have inspired each week's theme.\n\n[**Wind currents on Earth**](https://earth.nullschool.net/)<br> Dynamic and interactive map of wind currents on Earth.\n\n[**A Day in the Life of Americans**](https://flowingdata.com/2015/12/15/a-day-in-the-life-of-americans/)<br> Dynamic visualisation of how Americans spend their time in an average day.\n\n[**2019: The Year in Visual Stories and Graphics**](https://www.nytimes.com/interactive/2019/12/30/us/2019-year-in-graphics.html)<br> Collection of the most popular visualizations by the New York Times in 2019.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"collapse":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"number-sections":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.53","editor":"source","listing":{"sort-ui":["date","author"]},"theme":"flatly","title-block-banner":true,"citation":{"container-title":"BIOS² Education Resources"},"title":"Data Visualization","description":"General principles of visualization and graphic design, and techniques of tailored visualization. This training was developed and delivered by Alex Arkilanian and Katherine Hébert on September 21st and 22nd, 2020.\n","author":[{"name":"Alex Arkilanian","affiliation":"McGill University"},{"name":"Katherine Hébert","affiliation":"Université de Sherbrooke"}],"categories":["Technical","Fellow contributed","EN"],"date":"09-21-2020","image":"image.jpg","number-depth":1,"code-summary":"Show code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}