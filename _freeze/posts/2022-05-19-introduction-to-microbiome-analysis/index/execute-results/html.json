{
  "hash": "4589fcb95535be69590c783627f218ca",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Microbiome Analysis\"\ndescription: |\n  This workshop will give an overview of the theory and practice of using metabarcoding approaches to study the diversity of microbial communities. The workshop will give participants an understanding of 1) the current methods for microbiome diversity quantification using metabarcoding/amplicon sequencing approaches and 2) the normalization and diversity analysis approaches that can be used to quantify the diversity of microbial communities.\nauthor:\n  - name: \"Steven Kembel\"\n    affiliation: Université du Québec à Montréal\n  - name: \"Zihui Wang\"\n    affiliation: Université du Québec à Montréal\n  - name: \"Salix Dubois\"\n    affiliation: Université du Québec à Montréal\ncategories: [Technical, EN]\ndate: \"05-19-2022\"\nimage: image.jpg\ntoc: true\nnumber-sections: true\nnumber-depth: 1\n---\n\n\n# Workshop instructors\n\n[Dr. Steve Kembel](https://kembellab.ca/), Zihui Wang, and Salix Dubois\n\n[Université du Québec à Montréal](https://uqam.ca/)\n\n# Overview\n\nThis workshop will give an overview of the theory and practice of using amplicon sequencing approaches to study the diversity of microbial communities. In the first part of the workshop, we will discuss current methods for microbiome quantification using amplicon sequencing approaches. In the second part of the workshop, we will discuss normalization and diversity analysis approaches that can be used to quantify the diversity of microbial communities.\n\nThis workshop was developed with support from the [NSERC CREATE Computational Biodiversity Science and Services (BIOS²)](https://bios2.usherbrooke.ca/) training program and the [Canada Research Chair in Plant Microbiomes](https://kembellab.ca/).\n\n# Workshop materials\n\n## Day 1 - Microbiome quantification using amplicon sequencing approaches\n\n- Lecture - [Microbiome quantification using amplicon sequencing approaches (PDF)](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-analysis-1-sequence-analysis.pdf)\n- R practical - [Microbiome sequence analysis workshop](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-sequence-analysis.html)\n- Downloads\n  - [Sequence data and SILVA database files (~350MB download from figshare)](https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077)\n  - R workspace [Microbiome-sequence-analysis-workspace.RData](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-sequence-analysis-workspace.RData)\n  - [R Markdown file](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-sequence-analysis.Rmd) used to generate the R practical document\n\n## Day 2 - Data normalization and ecological analysis of microbiome data\n\n- Lecture - [Data normalization and ecological analysis of microbiome data (PDF)](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-analysis-2-ecological-analysis.pdf)\n- R practical - [Microbiome ecological analysis workshop](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-ecological-analysis.html)\n- Downloads\n  - Sample metadata [metadata-Qleaf_BACT.csv](http://kembellab.ca/microbiome-analysis-workshop/metadata-Qleaf_BACT.csv)\n  - DADA2 ASV sequence table [seqtab.nochim.rds](http://kembellab.ca/microbiome-analysis-workshop/seqtab.nochim.rds)\n  - DADA2 ASV taxonomic annotations [taxa.sp.rds](http://kembellab.ca/microbiome-analysis-workshop/#:~:text=ASV%20taxonomic%20annotations-,taxa.sp.rds,-R%20workspace%20Microbiome)\n- R workspace [Microbiome-ecological-analysis-workspace.RData](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-ecological-analysis-workspace.RData)\n- [R Markdown file](http://kembellab.ca/microbiome-analysis-workshop/Microbiome-ecological-analysis.Rmd) used to generate the R practical document\n\n# Requirements\n\nThe workshop assumes basic familiarity with R/RStudio; practical exercises are based on the use of R scripts to analyse sequence data and resulting community data sets.\n\nTo be able to follow along with the practical exercises on your own computer, in addition to downloading the data files above, you will need to do the following:\n\nInstall the latest version of R for your operating system (version 4.2.0 as of May 2022): [https://cran.r-project.org/](https://cran.r-project.org/)\n\nInstall the latest version of RStudio for your operating system (version 2022.02.2+485 as of May 2022): [https://www.rstudio.com/products/rstudio/download/](https://www.rstudio.com/products/rstudio/download/)\n\nInstall the packages that we will use during the workshop by executing the following code in R version 4.2.0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages from CRAN\ninstall.packages(pkgs = c(\"Rcpp\", \"RcppArmadillo\", \"picante\", \"ggpubr\", \"pheatmap\"), dependencies = TRUE)\n# install packages from Bioconductor\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\", version = \"3.15\", update = FALSE)\n# if the dada2 install returns a warning for BiocParallel, install from binary using this command:\n# BiocManager::install(\"BiocParallel\", version = \"3.15\", type=\"binary\", update = FALSE)\nBiocManager::install(\"DESeq2\")\nBiocManager::install(\"phyloseq\")\nBiocManager::install(\"ANCOMBC\")\n```\n:::\n\n\n# Microbiome quantification using amplicon sequencing approaches\n\n## About the data set\n\nIn this workshop, we will be analyzing the bacterial communities found on leaves of sugar maple seedlings of different provenances planted at sites across eastern North America.\n\nThese data are taken from the article:\n\nDe Bellis, Laforest-Lapointe, Solarik, Gravel, and Kembel. 2022. Regional variation drives differences in microbial communities associated with sugar maple across a latitudinal range. Ecology (published online ahead of print). [doi:10.1002/ecy.3727](https://doi.org/10.1002/ecy.3727)\n\nFor this workshop, we will work with a subset of samples from six of the nine sites sampled for the article. These samples are located in three different biomes (temperate, mixed, and boreal forests). At each site, several sugar maple seedlings were planted and harvested, and we collected bacterial DNA from the leaves. Each sample thus represents the bacterial communities on the leaves of a single sugar maple seedling. For each seedling, we have associated metadata on the provenance of the seed, the site where the seed was planted, and the biome/stand type where the seed was planted. We'll talk more about these samples and the biological hypotheses we want to test in day 2 of the workshop.\n\n### Data file setup and download\n\nTo follow along with the code, you will need to download the raw data (FASTQ sequence files) and the SILVA taxonomy files, and place a copy of these data sets in the working directory from which you are running the code.\n\nThe data files we will use for this workshop are available for download at the following URL: [https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077](https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077).\n\nThe sequence data in the folder rawdata-Qleaf_BACT consist of 74 compressed FASTQ files (2 files for each of 36 samples). These files were provided by the [UQAM CERMO-FC Genomics Platform](https://www.cermofc.uqam.ca/en/technological-platforms/genomics/) where the samples were sequenced in a multiplexed run on an Illumina MiSeq. The samples were demultiplexed into separate files based on the barcode associated with each sample, so there is a separate pair of files for each sample. One file labelled R2 contains the forward read for the sample, the other file labelled R1 contains the reverse read for the sample.\n\nIf your samples were not automatically demultiplexed by the sequencing centre, you will instead have just two files which are normally labelled R2 for forward reads and R1 for reverse reads, and you should also receive information about the sequence barcode associated with each sample. You will need to demultiplex this file yourself by using the unique barcode associated with each sample to split the single large file containing all samples together into a separate file for each sample. It is easier to not have to do this step yourself, so I recommend asking your sequencing centre how they will provide the data and request that the data be provided demultiplexed with separate files for each sample. If you do need to do the multiplexing yourself, there are numerous tools available to carry out demultplexing, including [QIIME](http://qiime.org/), [mothur](https://mothur.org/), or the standalone [idemp](https://github.com/yhwu/idemp) program.\n\nAfter downloading the compressed file \"rawdata-Qleaf_BACT.zip\" (the file is around 150MB in size), you will need to unzip the file into a folder on your computer. I suggest you place this folder in the working directory from which you are running the code for the workshop.\n\nThe SILVA taxonomy reference database files we will use for this workshop are available for download at the same URL where we found the sequence data: [https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077](https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077)\n\nAfter downloading the compressed file \"SILVA138.1.zip\" (the file is around 200MB in size), you will need to unzip the file into a folder on your computer. As for the raw data, I suggest you place this folder in the working directory from which you are running the code for the workshop.\n\nThis workshop uses the most recent version of the SILVA taxonomy currently available, which is version 138.1. There are up-to-date DADA2 formatted versions of the SILVA database along with other databases available at the [DADA2 website](https://benjjneb.github.io/dada2/training.html).\n\n### Install the DADA2 package\n\nYou will need to install the most recent version of the DADA2 R package. At the time of writing this workshop, this is DADA2 version 1.24.0. There are instructions for installing the DADA2 package [here](https://benjjneb.github.io/dada2/dada-installation.html). The command below works to install DADA2 version 1.24.0 using R version 4.2.0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install dada2 if needed\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\", version = \"3.15\")\n```\n:::\n\n\n## Sequence analysis with DADA2\n\nThis workshop is based directly on the excellent [DADA2 tutorial](https://benjjneb.github.io/dada2/tutorial.html). I highly recommend following the DADA2 tutorial when working with your own data, it is constantly updated to incorporate the latest version of the analyses available in the package and has helpful tips for analysing your own data. The DADA2 tutorial goes into more depth about each of the steps in this analysis pipeline, and includes useful advice about each step of the pipeline. In this workshop, we have adapted the tutorial materials to run through the basic steps of sequence analysis to go from sequence files to an ecological matrix of ASV abundances in samples, and the taxonomic annotation of those ASVs.\n\nWe begin by loading the DADA2 package.\n\n### Load package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load library, check version\nlibrary(dada2); packageVersion(\"dada2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Rcpp\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '1.22.0'\n```\n:::\n:::\n\n\n### Set file paths\n\nWe need to set file paths so DADA2 knows where to find the raw data FASTQ files. I recommend creating a RStudio project for this workshop and placing a copy of the folder with the raw data FASTQ files in the working directory; by default in RStudio the working directory is the folder where you created the project. The exact paths below will need to be changed depending on where you placed the raw data files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set path to raw data FASTQ files\n# here we assume the raw data are in a folder named \"rawdata-Qleaf_BACT\"\n# in the current working directory (the directory where we created our\n# RStudio project for this workshop, by default)\npath <- \"rawdata-Qleaf_BACT/\"\n# list the files found in the path - this should include 74 files with\n# names like '2017-11-miseq-trimmed_R1.fastq_BC.C2.3X2.fastq.gz\"\nlist.files(path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2017-11-miseq-trimmed_R1.fastq_AUC.C1.2X1.fastq.gz\" \n [2] \"2017-11-miseq-trimmed_R1.fastq_AUC.C1.3.fastq.gz\"   \n [3] \"2017-11-miseq-trimmed_R1.fastq_AUC.N1.1.fastq.gz\"   \n [4] \"2017-11-miseq-trimmed_R1.fastq_AUC.N1.3.fastq.gz\"   \n [5] \"2017-11-miseq-trimmed_R1.fastq_AUC.N2.1.X1.fastq.gz\"\n [6] \"2017-11-miseq-trimmed_R1.fastq_AUC.N2.1X2.fastq.gz\" \n [7] \"2017-11-miseq-trimmed_R1.fastq_AUC.N2.2.fastq.gz\"   \n [8] \"2017-11-miseq-trimmed_R1.fastq_AUC.S1.1.X2.fastq.gz\"\n [9] \"2017-11-miseq-trimmed_R1.fastq_AUC.S1X1.fastq.gz\"   \n[10] \"2017-11-miseq-trimmed_R1.fastq_AUC.S2.2.fastq.gz\"   \n[11] \"2017-11-miseq-trimmed_R1.fastq_BC.C1.2.fastq.gz\"    \n[12] \"2017-11-miseq-trimmed_R1.fastq_BC.C2.1X1.fastq.gz\"  \n[13] \"2017-11-miseq-trimmed_R1.fastq_BC.C2.3X2.fastq.gz\"  \n[14] \"2017-11-miseq-trimmed_R1.fastq_BC.C2.3X2b.fastq.gz\" \n[15] \"2017-11-miseq-trimmed_R1.fastq_BC.N1.3X2.fastq.gz\"  \n[16] \"2017-11-miseq-trimmed_R1.fastq_BC.N1.fastq.gz\"      \n[17] \"2017-11-miseq-trimmed_R1.fastq_BC.N2.1.X3.fastq.gz\" \n[18] \"2017-11-miseq-trimmed_R1.fastq_BC.N2.1X1.fastq.gz\"  \n[19] \"2017-11-miseq-trimmed_R1.fastq_BC.N2.1X2.fastq.gz\"  \n[20] \"2017-11-miseq-trimmed_R1.fastq_PAR.C1.1.fastq.gz\"   \n[21] \"2017-11-miseq-trimmed_R1.fastq_PAR.C1.2.fastq.gz\"   \n[22] \"2017-11-miseq-trimmed_R1.fastq_PAR.C2.3.fastq.gz\"   \n[23] \"2017-11-miseq-trimmed_R1.fastq_PAR.N1.3.fastq.gz\"   \n[24] \"2017-11-miseq-trimmed_R1.fastq_QLbactNeg19.fastq.gz\"\n[25] \"2017-11-miseq-trimmed_R1.fastq_QLbactNeg20.fastq.gz\"\n[26] \"2017-11-miseq-trimmed_R1.fastq_S.M.C1.3X2.fastq.gz\" \n[27] \"2017-11-miseq-trimmed_R1.fastq_S.M.C2.3.fastq.gz\"   \n[28] \"2017-11-miseq-trimmed_R1.fastq_S.M.C2.3X2.fastq.gz\" \n[29] \"2017-11-miseq-trimmed_R1.fastq_S.M.S1.1X1.fastq.gz\" \n[30] \"2017-11-miseq-trimmed_R1.fastq_SF.C1.3.fastq.gz\"    \n[31] \"2017-11-miseq-trimmed_R1.fastq_SF.C2.2.fastq.gz\"    \n[32] \"2017-11-miseq-trimmed_R1.fastq_SF.N2.3.fastq.gz\"    \n[33] \"2017-11-miseq-trimmed_R1.fastq_SF.S1.3.fastq.gz\"    \n[34] \"2017-11-miseq-trimmed_R1.fastq_T2.C1.1.fastq.gz\"    \n[35] \"2017-11-miseq-trimmed_R1.fastq_T2.C2.3.fastq.gz\"    \n[36] \"2017-11-miseq-trimmed_R1.fastq_T2.N1.1.fastq.gz\"    \n[37] \"2017-11-miseq-trimmed_R1.fastq_T2.S2.1.fastq.gz\"    \n[38] \"2017-11-miseq-trimmed_R2.fastq_AUC.C1.2X1.fastq.gz\" \n[39] \"2017-11-miseq-trimmed_R2.fastq_AUC.C1.3.fastq.gz\"   \n[40] \"2017-11-miseq-trimmed_R2.fastq_AUC.N1.1.fastq.gz\"   \n[41] \"2017-11-miseq-trimmed_R2.fastq_AUC.N1.3.fastq.gz\"   \n[42] \"2017-11-miseq-trimmed_R2.fastq_AUC.N2.1.X1.fastq.gz\"\n[43] \"2017-11-miseq-trimmed_R2.fastq_AUC.N2.1X2.fastq.gz\" \n[44] \"2017-11-miseq-trimmed_R2.fastq_AUC.N2.2.fastq.gz\"   \n[45] \"2017-11-miseq-trimmed_R2.fastq_AUC.S1.1.X2.fastq.gz\"\n[46] \"2017-11-miseq-trimmed_R2.fastq_AUC.S1X1.fastq.gz\"   \n[47] \"2017-11-miseq-trimmed_R2.fastq_AUC.S2.2.fastq.gz\"   \n[48] \"2017-11-miseq-trimmed_R2.fastq_BC.C1.2.fastq.gz\"    \n[49] \"2017-11-miseq-trimmed_R2.fastq_BC.C2.1X1.fastq.gz\"  \n[50] \"2017-11-miseq-trimmed_R2.fastq_BC.C2.3X2.fastq.gz\"  \n[51] \"2017-11-miseq-trimmed_R2.fastq_BC.C2.3X2b.fastq.gz\" \n[52] \"2017-11-miseq-trimmed_R2.fastq_BC.N1.3X2.fastq.gz\"  \n[53] \"2017-11-miseq-trimmed_R2.fastq_BC.N1.fastq.gz\"      \n[54] \"2017-11-miseq-trimmed_R2.fastq_BC.N2.1.X3.fastq.gz\" \n[55] \"2017-11-miseq-trimmed_R2.fastq_BC.N2.1X1.fastq.gz\"  \n[56] \"2017-11-miseq-trimmed_R2.fastq_BC.N2.1X2.fastq.gz\"  \n[57] \"2017-11-miseq-trimmed_R2.fastq_PAR.C1.1.fastq.gz\"   \n[58] \"2017-11-miseq-trimmed_R2.fastq_PAR.C1.2.fastq.gz\"   \n[59] \"2017-11-miseq-trimmed_R2.fastq_PAR.C2.3.fastq.gz\"   \n[60] \"2017-11-miseq-trimmed_R2.fastq_PAR.N1.3.fastq.gz\"   \n[61] \"2017-11-miseq-trimmed_R2.fastq_QLbactNeg19.fastq.gz\"\n[62] \"2017-11-miseq-trimmed_R2.fastq_QLbactNeg20.fastq.gz\"\n[63] \"2017-11-miseq-trimmed_R2.fastq_S.M.C1.3X2.fastq.gz\" \n[64] \"2017-11-miseq-trimmed_R2.fastq_S.M.C2.3.fastq.gz\"   \n[65] \"2017-11-miseq-trimmed_R2.fastq_S.M.C2.3X2.fastq.gz\" \n[66] \"2017-11-miseq-trimmed_R2.fastq_S.M.S1.1X1.fastq.gz\" \n[67] \"2017-11-miseq-trimmed_R2.fastq_SF.C1.3.fastq.gz\"    \n[68] \"2017-11-miseq-trimmed_R2.fastq_SF.C2.2.fastq.gz\"    \n[69] \"2017-11-miseq-trimmed_R2.fastq_SF.N2.3.fastq.gz\"    \n[70] \"2017-11-miseq-trimmed_R2.fastq_SF.S1.3.fastq.gz\"    \n[71] \"2017-11-miseq-trimmed_R2.fastq_T2.C1.1.fastq.gz\"    \n[72] \"2017-11-miseq-trimmed_R2.fastq_T2.C2.3.fastq.gz\"    \n[73] \"2017-11-miseq-trimmed_R2.fastq_T2.N1.1.fastq.gz\"    \n[74] \"2017-11-miseq-trimmed_R2.fastq_T2.S2.1.fastq.gz\"    \n```\n:::\n:::\n\n\n### Find data files and extract sample names\n\nNow that we have the list of raw data FASTQ files, we need to process these file names to identify forward and reverse reads. For each sequence, the sequencer will create two files labelled R2 and R1. One of these files contains the forward reads, the other the reverse reads. Which file is which will depend on the protocol used to create sequencing libraries. In our case, the R2 files contain the forward reads, and the R1 files contain the reverse reads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify forward and reverse reads\n# Filenames containing R2 are forward reads, R1 are reverse reads\nfnFs <- sort(list.files(path, pattern=\"R2\", full.names = TRUE))\nfnRs <- sort(list.files(path, pattern=\"R1\", full.names = TRUE))\n```\n:::\n\n\nWe also need to process the filenames to extract and clean up the sample names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# FASTQ filenames have format:\n# BLABLA_R1.fastq_SAMPLENAME.fastq.gz\n# Extract sample names from filenames\n# Split filename at \"_\" character, the sample name is in the third chunk\nsample.names <- sapply(strsplit(basename(fnFs), \"_\"), `[`, 3)\n# Remove extra text from the end of filenames\nsample.names <- gsub(\".fastq.gz\", \"\", sample.names)\n# Look at sample names after processing\nsample.names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"AUC.C1.2X1\"  \"AUC.C1.3\"    \"AUC.N1.1\"    \"AUC.N1.3\"    \"AUC.N2.1.X1\"\n [6] \"AUC.N2.1X2\"  \"AUC.N2.2\"    \"AUC.S1.1.X2\" \"AUC.S1X1\"    \"AUC.S2.2\"   \n[11] \"BC.C1.2\"     \"BC.C2.1X1\"   \"BC.C2.3X2\"   \"BC.C2.3X2b\"  \"BC.N1.3X2\"  \n[16] \"BC.N1\"       \"BC.N2.1.X3\"  \"BC.N2.1X1\"   \"BC.N2.1X2\"   \"PAR.C1.1\"   \n[21] \"PAR.C1.2\"    \"PAR.C2.3\"    \"PAR.N1.3\"    \"QLbactNeg19\" \"QLbactNeg20\"\n[26] \"S.M.C1.3X2\"  \"S.M.C2.3\"    \"S.M.C2.3X2\"  \"S.M.S1.1X1\"  \"SF.C1.3\"    \n[31] \"SF.C2.2\"     \"SF.N2.3\"     \"SF.S1.3\"     \"T2.C1.1\"     \"T2.C2.3\"    \n[36] \"T2.N1.1\"     \"T2.S2.1\"    \n```\n:::\n:::\n\n\nWe now have the list of filenames for the forward and reverse reads, the list of sample names, and we know the sample name associated with each file.\n\n### Look at sequence quality profiles\n\nThe first step of working with our raw data is to look at the sequence quality profiles. These raw data FASTQ files were generated by sequencing a multiplexed library using the Illumina MiSeq sequencer. For this study, we used the Illumina V3 2x300nt sequencing chemistry, which sequences the first 300 nucleotides at the start (forward read) and end (reverse read) of each amplicon.\n\nThere is a quality score associated with each nucleotide known as the [Phred quality score](https://en.wikipedia.org/wiki/Phred_quality_score). This score indicates how confident we are in the identity of that nucleotide. Normally, the quality score should be above 30 (= 1 in 1000 chance of an incorrect base call) for much of the read, but it will begin to drop towards the end of the read. We want to identify where the quality begins to drop so we can trim out the low quality nucleotides.\n\nWe will visualize the forward and reverse read quality scores separately. Here, we begin by looking at the quality profile of forward reads for the first 9 samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot quality profile of forward reads\nplotQualityProfile(fnFs[1:9])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the dada2 package.\n  Please report the issue at <\u001b]8;;https://github.com/benjjneb/dada2/issues\u0007https://github.com/benjjneb/dada2/issues\u001b]8;;\u0007>.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 937 rows containing missing values (`geom_tile()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe can see that the quality is quite good, but around 200-220 nucleotides it begins to decrease. It's not a sharp drop (a \"crash\") but the median quality starts to decline around 200 nucleotides and dips below a median quality of around 20 by around 230-240 nucleotides.\n\nNow let's look at the reverse reads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot quality profile of reverse reads\nplotQualityProfile(fnRs[1:9])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 188 rows containing missing values (`geom_tile()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThese are similar to the forward reads, but the quality stays high for longer. This is common (the R1 read tends to be of high quality than the R2). Here, the quality stays quite high almost all the way to the end of the read, although the median quality does begin to decline starting around 230-240 nucleotides.\n\n### Trimming and quality control\n\nNow that we have visualized the quality of the reads, we need to make some decisions about where to trim the reads.\n\nIt is very important to trim barcode and primer nucleotides from the reads as they can cause problems when identifying ASVs. Our reads contain the 12 nucleotide barcode sequence at the beginning of each read that will need to be trimmed. In our case, we used the primers 799F and 1115R to amplify the bacterial 16S rRNA gene. These primers are 18 nucleotides (799F) and 16 nucleotides (1115R) in length, and are found after the barcode sequence at the beginning of each read. Sometimes FASTQ files will be supplied with the barcodes and/or primers already removed from the sequences; you will need to check or ask the sequencing centre about this for your own data. In our case we will need to remove the forward barcode + primer nucleotides (30 nucleotides) and the reverse barcode + primer nucleotides (28 nucleotides) from the beginning of each read.\n\nWe also need to trim the reads to remove low-quality nucleotides from the end of the reads. As we saw above, the quality of both the forward and reverse reads are quite good, but forward read quality did begin to decline around 200 nucleotides and reverse read quality declines slightly beginning around 230-240 nucleotides.\n\nAn important consideration when deciding where to trim our reads is that we want to be able to merge together the forward and reverse reads later in the pipeline. To do this, we need the reads to overlap with one another. To figure out whether our forward and reverse reads will overlap after trimming, we need to know the length of the amplicon that we sequenced. In our case, the 799F-1115R primers create an amplicon that is 316 nucleotides in length. Thus, we need to make sure that the total length of the forward and reverse reads that remains after trimming is longer than 316 nucleotides in order to have some overlapping nucleotides that can be used to merge the reads together. If the forward and reverse reads cannot be merged by overlap after trimming, it will not be possible to create a merged read that covers the full length of the amplicon. This is not a fatal problem but it can reduce accuracy of ASV binning (since we are missing data for a portion of the amplicon) and it makes taxonomic annotation more challenging. The overlapping portion of the reads also serves to increase confidence in the quality of ASVs, since for the overlapping portion we have two estimates of the nucleotide at each position which serves to reduce error and increase confidence in the base call at that position.\n\nThis is an important consideration when choosing what primers to use and what sequencing technology to use. You should aim to ensure that the total length of your forward and reverse reads is enough to cover the length of the region targeted by your primers, with as much overlap as possible to make merging the reads together easier. In our case, with an amplicon length of 312 nucleotides, and forward/reverse reads of around 300 nucleotides each, we will be sure to have lots of overlap, so we don't have to worry too much if we need to trim our reads.\n\nNow that we know the number of nucleotides to trim from the start and end of each sequence, we can now filter and trim our reads. Here, we will trim out barcode and primer nucleotides from the start of reads and low-quality nucleotides from the end of reads. We also filter out reads with low quality after trimming, as well as reads that contain N (unknown) nucleotides and reads that map to the phiX genome (a viral genome that is often added to sequencing runs to increase library quality).\n\nThis will create filtered versions of the FASTQ files in a new folder named dada2-filtered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set filtered file folder paths and filenames\nfilt_path <- file.path(getwd(), \"dada2-filtered\")\nfiltFs <- file.path(filt_path, paste0(sample.names, \"_F_filt.fastq.gz\"))\nfiltRs <- file.path(filt_path, paste0(sample.names, \"_R_filt.fastq.gz\"))\n\n# Filter and trim reads\n# multithread argument = number of cores to use (set TRUE to use all)\n# note need to trim out primers at the start of the reads\n# and trim the end of the reads when the quality crashes\nout <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft = c(30,28),\n                     truncLen=c(200,230), maxN=0, maxEE=2,\n                     truncQ=2, rm.phix=TRUE, compress=TRUE, \n                     multithread=TRUE, verbose=TRUE)\n```\n:::\n\n\n### Inferring ASVs\n\nNow that we have our trimmed quality-control sequences, we can infer the identity and abundance of ASVs in our sequence files.\n\nThe first step of this process is to learn the error rates of our sequences. DADA2 uses information about error rates to infer the identity of ASVs in the samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Learn error rates\nerrF <- learnErrors(filtFs, multithread=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n103149200 total bases in 606760 reads from 32 samples will be used for learning the error rates.\n```\n:::\n\n```{.r .cell-code}\nerrR <- learnErrors(filtRs, multithread=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n101062620 total bases in 500310 reads from 22 samples will be used for learning the error rates.\n```\n:::\n:::\n\n\nOnce we have learned the error rates, we do some bookkeeping to reduce the time required to infer ASVs by removing replicate sequences from each sample. A given FASTQ file might contain large numbers of identical sequences. We don't need to analyse each of these sequences separately; we'll dereplicate the file by removing duplicates of identical sequences. This keeps track of the number of duplicates so that at the end of our process we know the actual abundance of each of these identical sequences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dereplicate the filtered fastq files\nderepFs <- derepFastq(filtFs)\nderepRs <- derepFastq(filtRs)\n# Name the derep-class objects by the sample names\nnames(derepFs) <- sample.names\nnames(derepRs) <- sample.names\n```\n:::\n\n\nNow we are ready to use the [DADA2 algorithm](http://dx.doi.org/10.1038/nmeth.3869) to identify ASVs in our samples. DADA2 uses a model of the error rate in sequences to identify the unique amplicon sequence variants (ASVs) that are present in our samples.\n\nWhen carrying out ASV binning and chimera identification, we have the option to pool together samples (the pool argument). There are different strategies for pooling samples together. It is quicker to bin ASVs on a per-sample basis, but this might miss extremely rare ASVs that occur with low abundance in multiple samples. By pooling samples together, we can increase our ability to accurately identify these rare ASVs. The downside is that pooling samples together takes more time since we not have to analyse a larger number of sequences at the same time. The \"pseudo-pooling\" option strikes a balance between these options and is the approach we'll use today. There is an in-depth explanation of the different pooling options at the [DADA2 website](https://benjjneb.github.io/dada2/pseudo.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer the sequence variants in each sample\ndadaFs <- dada(derepFs, err=errF, pool=\"pseudo\", multithread=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSample 1 - 43893 reads in 4133 unique sequences.\nSample 2 - 1535 reads in 279 unique sequences.\nSample 3 - 342 reads in 80 unique sequences.\nSample 4 - 36815 reads in 4992 unique sequences.\nSample 5 - 6901 reads in 796 unique sequences.\nSample 6 - 69130 reads in 6170 unique sequences.\nSample 7 - 13883 reads in 1640 unique sequences.\nSample 8 - 35769 reads in 2874 unique sequences.\nSample 9 - 35178 reads in 3504 unique sequences.\nSample 10 - 49487 reads in 5858 unique sequences.\nSample 11 - 15594 reads in 1607 unique sequences.\nSample 12 - 28849 reads in 2366 unique sequences.\nSample 13 - 529 reads in 110 unique sequences.\nSample 14 - 29475 reads in 2956 unique sequences.\nSample 15 - 22328 reads in 1714 unique sequences.\nSample 16 - 17615 reads in 2171 unique sequences.\nSample 17 - 24895 reads in 3116 unique sequences.\nSample 18 - 31171 reads in 2974 unique sequences.\nSample 19 - 11127 reads in 1205 unique sequences.\nSample 20 - 20 reads in 16 unique sequences.\nSample 21 - 255 reads in 57 unique sequences.\nSample 22 - 25519 reads in 2519 unique sequences.\nSample 23 - 7057 reads in 645 unique sequences.\nSample 24 - 29 reads in 11 unique sequences.\nSample 25 - 86 reads in 23 unique sequences.\nSample 26 - 11570 reads in 1413 unique sequences.\nSample 27 - 21806 reads in 2227 unique sequences.\nSample 28 - 8836 reads in 1092 unique sequences.\nSample 29 - 500 reads in 108 unique sequences.\nSample 30 - 19733 reads in 2783 unique sequences.\nSample 31 - 347 reads in 94 unique sequences.\nSample 32 - 36486 reads in 5477 unique sequences.\nSample 33 - 22106 reads in 2394 unique sequences.\nSample 34 - 24618 reads in 2881 unique sequences.\nSample 35 - 608 reads in 124 unique sequences.\nSample 36 - 25074 reads in 3998 unique sequences.\nSample 37 - 22197 reads in 2188 unique sequences.\n\n   selfConsist step 2\n```\n:::\n\n```{.r .cell-code}\ndadaRs <- dada(derepRs, err=errR, pool=\"pseudo\", multithread=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSample 1 - 43893 reads in 3352 unique sequences.\nSample 2 - 1535 reads in 196 unique sequences.\nSample 3 - 342 reads in 71 unique sequences.\nSample 4 - 36815 reads in 4930 unique sequences.\nSample 5 - 6901 reads in 557 unique sequences.\nSample 6 - 69130 reads in 5237 unique sequences.\nSample 7 - 13883 reads in 1296 unique sequences.\nSample 8 - 35769 reads in 2357 unique sequences.\nSample 9 - 35178 reads in 2961 unique sequences.\nSample 10 - 49487 reads in 4856 unique sequences.\nSample 11 - 15594 reads in 1250 unique sequences.\nSample 12 - 28849 reads in 2007 unique sequences.\nSample 13 - 529 reads in 83 unique sequences.\nSample 14 - 29475 reads in 2315 unique sequences.\nSample 15 - 22328 reads in 1413 unique sequences.\nSample 16 - 17615 reads in 1728 unique sequences.\nSample 17 - 24895 reads in 2801 unique sequences.\nSample 18 - 31171 reads in 2593 unique sequences.\nSample 19 - 11127 reads in 1113 unique sequences.\nSample 20 - 20 reads in 16 unique sequences.\nSample 21 - 255 reads in 48 unique sequences.\nSample 22 - 25519 reads in 2316 unique sequences.\nSample 23 - 7057 reads in 571 unique sequences.\nSample 24 - 29 reads in 8 unique sequences.\nSample 25 - 86 reads in 18 unique sequences.\nSample 26 - 11570 reads in 1256 unique sequences.\nSample 27 - 21806 reads in 1916 unique sequences.\nSample 28 - 8836 reads in 1008 unique sequences.\nSample 29 - 500 reads in 96 unique sequences.\nSample 30 - 19733 reads in 2245 unique sequences.\nSample 31 - 347 reads in 87 unique sequences.\nSample 32 - 36486 reads in 5014 unique sequences.\nSample 33 - 22106 reads in 2037 unique sequences.\nSample 34 - 24618 reads in 2683 unique sequences.\nSample 35 - 608 reads in 83 unique sequences.\nSample 36 - 25074 reads in 3689 unique sequences.\nSample 37 - 22197 reads in 1876 unique sequences.\n\n   selfConsist step 2\n```\n:::\n:::\n\n\n### Merge denoised forward and reverse reads\n\nNow that we have identified ASVs from our sequences, we can merge together the forward and reverse reads into a single sequence that will cover the full length of our amplicon. This approach works by looking for matching nucleotides in the overlapping portion of the forward and reverse reads.\n\nAs noted above, if your forward and reverse reads do not overlap, they cannot be merged. It is still possible to merge them by concatenating together the forward and reverse reads, but this approach makes it more difficult to do taxonomic annotation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge the denoised forward and reverse reads:\nmergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs)\n```\n:::\n\n\n### Construct sequence table\n\nWe have identified ASVs and merged the forward and reverse reads into a single ASV. We can now construct the sequence table, which is a matrix of ASV abundances in each sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# construct sequence table\nseqtab <- makeSequenceTable(mergers)\n# look at dimension of sequence table (# samples, # ASVs)\ndim(seqtab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   37 2540\n```\n:::\n\n```{.r .cell-code}\n# look at length of ASVs\ntable(nchar(getSequences(seqtab)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n295 296 297 298 299 300 301 302 303 304 305 306 307 308 312 318 \n 12 113  73  99  82 458 264 697 484 109 140   1   5   1   1   1 \n```\n:::\n:::\n\n\n### Remove chimeras\n\nThe final step of processing the sequence files involves identifying and removing chimeric sequences. These are sequences that contain portions of two distinct organisms. Chimeric sequences can arise at different stages in the process of sequencing samples including during PCR and during sequencing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove chimeras\nseqtab.nochim <- removeBimeraDenovo(seqtab, method=\"consensus\", multithread=TRUE, verbose=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nIdentified 1425 bimeras out of 2540 input sequences.\n```\n:::\n\n```{.r .cell-code}\n# look at dimension of sequence table (# samples, # ASVs) after chimera removal\ndim(seqtab.nochim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   37 1115\n```\n:::\n\n```{.r .cell-code}\n# what % of reads remain after chimera removal?\nsum(seqtab.nochim)/sum(seqtab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9836811\n```\n:::\n:::\n\n\n### Tracking read fate through the pipeline\n\nNow we have completed the processing of our files.\nWe can track how many reads per sample remain after the different steps of the process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary - track reads through the pipeline\ngetN <- function(x) sum(getUniques(x))\ntrack <- cbind(out, sapply(dadaFs, getN), sapply(mergers, getN), rowSums(seqtab), rowSums(seqtab.nochim))\ncolnames(track) <- c(\"input\", \"filtered\", \"denoised\", \"merged\", \"tabled\", \"nonchim\")\nrownames(track) <- sample.names\nhead(track)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            input filtered denoised merged tabled nonchim\nAUC.C1.2X1  45852    43893    43836  43297  43297   43268\nAUC.C1.3     1605     1535     1535   1532   1532    1522\nAUC.N1.1      362      342      332    324    324     324\nAUC.N1.3    38442    36815    36731  35069  35069   33707\nAUC.N2.1.X1  7193     6901     6899   6857   6857    6854\nAUC.N2.1X2  72307    69130    69116  68251  68251   68226\n```\n:::\n:::\n\n\n### Taxonomic annotation\n\nNow we will annotate the taxonomic identity of each ASV by comparing its sequence with a reference database. Our data are bacterial 16S rRNA sequences so we'll use the SILVA database for this taxonomic annotation. A version of the SILVA database formatted for use with DADA2 is available at the [DADA2 website](https://benjjneb.github.io/dada2/training.html), along with other databases for different barcode genes.\n\n#### Higher-level taxonomic annotation\n\nFor taxonomic annotation at ranks from domains to genera, DADA2 uses the [RDP Naive Bayesian Classifier algorithm](https://journals.asm.org/doi/10.1128/AEM.00062-07). This algorithm compares each ASV sequence to the reference database. If the bootstrap confidence in the taxonomic annotation at each rank is 50% or greater, we assign that annotation to the ASV at that rank. If an ASV cannot be confidently identified at a given rank, there will be a NA value in the taxonomy table.\n\nNote that this step can be time consuming, especially if you have a large number of ASVs to identify. Running this annotation step on a computer with numerous cores/threads will speed up the process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify taxonomy\ntaxa <- assignTaxonomy(seqtab.nochim, \"SILVA138.1/silva_nr99_v138.1_train_set.fa.gz\", multithread=TRUE, tryRC=TRUE)\n```\n:::\n\n\n#### Species-level taxonomic annotation\n\nWe use the RDP Naive Bayesian Classifier algorithm for taxonomic annotations at ranks from domains to genera. This allows for annotations even if there is not an exact match between ASV sequences and sequences in the reference database. At the species level, we need a different strategy, since we do not want to identify an ASV as belonging to a species unless its sequence matches that species exactly. Note that this approach means that we cannot carry out species-level taxonomic annotation if we concatenated our sequences rather than merging them together into a single sequence.\n\nThis step can also be somewhat time consuming depending on the number of ASVs to be annotated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# exact species matching (won't work if concatenating sequences)\ntaxa.sp <- addSpecies(taxa,  \"SILVA138.1/silva_species_assignment_v138.1.fa.gz\", allowMultiple = TRUE, tryRC = TRUE)\n```\n:::\n\n\nNow that we have the taxonomic annotations, we can inspect them. We create a special version of the taxonomy table with the ASV names removed (the name of each ASV is its full sequence, so the names are very long).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# inspect the taxonomic assignments\ntaxa.print <- taxa.sp # Removing sequence rownames for display only\nrownames(taxa.print) <- NULL\nhead(taxa.print, n=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Kingdom    Phylum             Class                 Order             \n [1,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n [2,] \"Bacteria\" \"Cyanobacteria\"    \"Cyanobacteriia\"      \"Chloroplast\"     \n [3,] \"Bacteria\" \"Bacteroidota\"     \"Bacteroidia\"         \"Cytophagales\"    \n [4,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n [5,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n [6,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n [7,] \"Bacteria\" \"Actinobacteriota\" \"Actinobacteria\"      \"Micrococcales\"   \n [8,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n [9,] \"Bacteria\" \"Actinobacteriota\" \"Actinobacteria\"      \"Micrococcales\"   \n[10,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n[11,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n[12,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n[13,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n[14,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n[15,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n[16,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n[17,] \"Bacteria\" \"Proteobacteria\"   \"Gammaproteobacteria\" \"Burkholderiales\" \n[18,] \"Bacteria\" \"Proteobacteria\"   \"Gammaproteobacteria\" \"Burkholderiales\" \n[19,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Sphingomonadales\"\n[20,] \"Bacteria\" \"Proteobacteria\"   \"Alphaproteobacteria\" \"Rhizobiales\"     \n      Family              Genus                           \n [1,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n [2,] NA                  NA                              \n [3,] \"Hymenobacteraceae\" \"Hymenobacter\"                  \n [4,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n [5,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n [6,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n [7,] \"Microbacteriaceae\" \"Amnibacterium\"                 \n [8,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n [9,] \"Microbacteriaceae\" \"Frondihabitans\"                \n[10,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n[11,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n[12,] \"Beijerinckiaceae\"  \"1174-901-12\"                   \n[13,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n[14,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n[15,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n[16,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n[17,] \"Oxalobacteraceae\"  \"Massilia\"                      \n[18,] \"Oxalobacteraceae\"  \"Massilia\"                      \n[19,] \"Sphingomonadaceae\" \"Sphingomonas\"                  \n[20,] \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n      Species                                        \n [1,] NA                                             \n [2,] NA                                             \n [3,] \"arcticus/bucti/perfusus\"                      \n [4,] \"aerolata/faeni\"                               \n [5,] NA                                             \n [6,] NA                                             \n [7,] NA                                             \n [8,] \"ginsenosidivorax\"                             \n [9,] \"australicus/cladoniiphilus/peucedani/sucicola\"\n[10,] NA                                             \n[11,] NA                                             \n[12,] NA                                             \n[13,] NA                                             \n[14,] \"faeni\"                                        \n[15,] \"echinoides/glacialis/mucosissima/rhizogenes\"  \n[16,] NA                                             \n[17,] NA                                             \n[18,] \"aurea/oculi\"                                  \n[19,] NA                                             \n[20,] NA                                             \n```\n:::\n:::\n\n\n### Final steps - clean up and save data objects and workspace\n\nWe have now completed our analysis of the sequence files. We have created an ASV table seqtab.nochim that contains the error-corrected non-chimeric ASV sequences and their abundances in each sample. For each ASV we also have the taxonomic annotations of the ASV in the object taxa.sp. We will save these data objects to the file system, along with a copy of the entire workspace containing all the output of the analyses so far. We will use these files to continue our analyses in the next part of the workshop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Save sequence table and taxonomic annotations to individual files\nsaveRDS(seqtab.nochim, \"seqtab.nochim.rds\")\nsaveRDS(taxa.sp, \"taxa.sp.rds\")\n## Save entire R workspace to file\nsave.image(\"Microbiome-sequence-analysis-workspace.RData\")\n```\n:::\n\n\n\n# Data normalization and ecological analysis of microbiome data\n\nIn this workshop, we will use the output of a DADA2 analysis of raw sequence data to explore the importance of different factors that influence the diversity and composition of microbial communities on leaves.\n\n## About the data set\n\nIn this workshop, we will be analyzing the bacterial communities found on leaves of sugar maple seedlings of different provenances planted at sites across eastern North America.\n\nThese data are taken from the article:\n\nDe Bellis, Laforest-Lapointe, Solarik, Gravel, and Kembel. 2022. Regional variation drives differences in microbial communities associated with sugar maple across a latitudinal range. Ecology (published online ahead of print). [doi:10.1002/ecy.3727](https://doi.org/10.1002/ecy.3727)\n\nFor this workshop, we will work with a subset of samples from six of the nine sites sampled for the article. These samples are located in three different biomes (temperate, mixed, and boreal forests). At each site, several sugar maple seedlings were planted and harvested, and we collected bacterial DNA from the leaves. Each sample thus represents the bacterial communities on the leaves of a single sugar maple seedling. For each seedling, we have associated metadata on the provenance of the seed, the site where the seed was planted, and the biome/stand type where the seed was planted.\n\n## Install and load required packages and data\n\nFor this part of the workshop we will need to install several R packages. The commands below should work to install these packages, you should make sure you have the latest version of R installed (version 4.2.0 at the time of writing this document).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages from CRAN\ninstall.packages(pkgs = c(\"Rcpp\", \"RcppArmadillo\", \"picante\", \"ggpubr\", \"pheatmap\"), dependencies = TRUE)\n# install packages from Bioconductor\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"dada2\", version = \"3.15\", update = FALSE)\n# if the dada2 install returns a warning for BiocParallel, install from binary using this command:\n# BiocManager::install(\"BiocParallel\", version = \"3.15\", type=\"binary\", update = FALSE)\nBiocManager::install(\"DESeq2\")\nBiocManager::install(\"phyloseq\")\nBiocManager::install(\"ANCOMBC\")\n```\n:::\n\n\nTo begin, we will load the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### load packages\nlibrary(picante)\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(ggpubr)\nlibrary(DESeq2)\nlibrary(pheatmap)\nlibrary(ANCOMBC)\nlibrary(phyloseq)\n```\n:::\n\n\n### Load DADA2 results  \n\nWe will continue our analyses picking up where we left off at the end of day 1 of the workshop. We used the DADA2 package to identify ASVs and their abundances in samples, and to annotate ASVs taxonomically by comparing them to the SILVA rRNA database. We saved these data objects as files. You will need to place a copy of the files \"seqtab.nochim.rds\" and \"taxa.sp.rds\" in the working directory, and then we load them into our R workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load sequence table (nonchimeric ASV abundances in samples)\nseqtab.nochim <- readRDS(\"seqtab.nochim.rds\")\n# load taxonomic annotations (taxonomic ID of each ASV)\ntaxa.sp <- readRDS(\"taxa.sp.rds\")\n```\n:::\n\n\n### Load metadata  \n\nThe metadata file we will use for this workshop is available for download at the following URL: [https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077](https://figshare.com/articles/dataset/Data_files_for_BIOS2_Microbiome_Analysis_Workshop/19763077).\n\nYou will need to download the file \"metadata-Qleaf_BACT.csv\" and place a copy of this file in the working directory. Then we can load the metadata.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load metadata\nmetadata <- read.csv(\"metadata-Qleaf_BACT.csv\", row.names = 1)\n# inspect metadata\nhead(metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Description    SampleType StandType TransplantedSite\nASH.S2.2       ASH.S2.2 Leaf.Bacteria    Boreal    Ashuapmushuan\nASH.N1.1.X1 ASH.N1.1.X1 Leaf.Bacteria    Boreal    Ashuapmushuan\nASH.N1.1.X3 ASH.N1.1.X3 Leaf.Bacteria    Boreal    Ashuapmushuan\nASH.N1.1X3   ASH.N1.1X3 Leaf.Bacteria    Boreal    Ashuapmushuan\nASH.C1.1       ASH.C1.1 Leaf.Bacteria    Boreal    Ashuapmushuan\nASH.C1.2       ASH.C1.2 Leaf.Bacteria    Boreal    Ashuapmushuan\n            SeedSourceRegion SeedSourceOrigin TransplantedSiteLat\nASH.S2.2               South         Kentucky               48.81\nASH.N1.1.X1            North        Montmagny               48.81\nASH.N1.1.X3            North        Montmagny               48.81\nASH.N1.1X3             North        Montmagny               48.81\nASH.C1.1             Central     Pennsylvania               48.81\nASH.C1.2             Central     Pennsylvania               48.81\n            TransplantedSiteLon SeedSourceOriginLat SeedSourceOriginLon\nASH.S2.2                 -72.77               38.26              -84.95\nASH.N1.1.X1              -72.77               46.95              -70.46\nASH.N1.1.X3              -72.77               46.95              -70.46\nASH.N1.1X3               -72.77               46.95              -70.46\nASH.C1.1                 -72.77               41.13              -77.62\nASH.C1.2                 -72.77               41.13              -77.62\n```\n:::\n:::\n\n\nThe metadata contains information about each sample, including the following columns:\n\n* Description: the name of the sample (these match the names used on the sequence files)\n* SampleType: the samples we are working with are all leaf bacteria (we collected other types of data in the original study, but here we focus just on leaf bacteria)\n* StandType: the stand/biome type of the site where the seedling were planted. Either boreal, mixed, or temperate forest.\n* TransplantedSite: the site where the seedling was planted\n* SeedSourceRegion: the region from which the seed was collected\n* SeedSourceOrigin: the site from which the seed was collected\n* TransplantedSiteLat and TransplantedSiteLon: the latitude and longitude of the site where the seedling was transplanted\n\n## Cleaning and summarizing DADA2 results  \n\nOur first steps will be to do some cleaning up of the DADA2 results to make it easier to work with them. We create community and taxonomy objects that we will work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# community object from nonchimeric ASV sequence table\ncomm <- seqtab.nochim\n# taxonomy object - make sure order of ASVs match between community and taxonomy\ntaxo <- taxa.sp[colnames(comm),]\n# keep metadata only for community samples\nmetadata <- metadata[rownames(comm),]\n```\n:::\n\n\nWe will also rename the ASVs in our community and taxonomy data objects. By default, ASVs are named by their full sequence. This makes it hard to look at these objects since the names are too long to display easily. We will replace the names of ASVs by \"ASV_XXX\" where XXX is a number from 1 to the number of observed ASVs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ASV names are their full sequences by default\n# This makes it very hard to look at them (the names are too long)\n# Store ASV sequence information and rename ASVs as \"ASV_XXX\"\nASV.sequence.info <- data.frame(ASV.name=paste0('ASV_',1:dim(comm)[2]),\n                                ASV.sequence=colnames(comm))\ncolnames(comm) <- ASV.sequence.info$ASV.name\nrownames(taxo) <- ASV.sequence.info$ASV.name\n```\n:::\n\n\n### Exploring community data\n\nNow we can begin to look at our data in more depth. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# community - number of samples (rows) and ASVs (columns)\ndim(comm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   37 1115\n```\n:::\n:::\n\n\nWe have 37 samples and 1115 ASVs. If we look at our data objects, we can see the type of data in each of the different objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at community data object\nhead(comm)[,1:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            ASV_1 ASV_2 ASV_3 ASV_4 ASV_5 ASV_6\nAUC.C1.2X1  10335   158  3993  4092   584  3225\nAUC.C1.3      123    98    15     0     3     3\nAUC.N1.1       84    17    16     5     0     3\nAUC.N1.3     4738   113   628  3978     0   329\nAUC.N2.1.X1  1871  1853  1431    20    58     2\nAUC.N2.1X2  19648  4200  6465   191  7221  2054\n```\n:::\n\n```{.r .cell-code}\n# look at taxonomy object\nhead(taxo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Kingdom    Phylum           Class                 Order             \nASV_1 \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Rhizobiales\"     \nASV_2 \"Bacteria\" \"Cyanobacteria\"  \"Cyanobacteriia\"      \"Chloroplast\"     \nASV_3 \"Bacteria\" \"Bacteroidota\"   \"Bacteroidia\"         \"Cytophagales\"    \nASV_4 \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Sphingomonadales\"\nASV_5 \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Sphingomonadales\"\nASV_6 \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Rhizobiales\"     \n      Family              Genus                           \nASV_1 \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\nASV_2 NA                  NA                              \nASV_3 \"Hymenobacteraceae\" \"Hymenobacter\"                  \nASV_4 \"Sphingomonadaceae\" \"Sphingomonas\"                  \nASV_5 \"Sphingomonadaceae\" \"Sphingomonas\"                  \nASV_6 \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\"\n      Species                  \nASV_1 NA                       \nASV_2 NA                       \nASV_3 \"arcticus/bucti/perfusus\"\nASV_4 \"aerolata/faeni\"         \nASV_5 NA                       \nASV_6 NA                       \n```\n:::\n\n```{.r .cell-code}\n# look at metadata object\nhead(metadata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Description    SampleType StandType TransplantedSite\nAUC.C1.2X1   AUC.C1.2X1 Leaf.Bacteria     Mixed          Auclair\nAUC.C1.3       AUC.C1.3 Leaf.Bacteria     Mixed          Auclair\nAUC.N1.1       AUC.N1.1 Leaf.Bacteria     Mixed          Auclair\nAUC.N1.3       AUC.N1.3 Leaf.Bacteria     Mixed          Auclair\nAUC.N2.1.X1 AUC.N2.1.X1 Leaf.Bacteria     Mixed          Auclair\nAUC.N2.1X2   AUC.N2.1X2 Leaf.Bacteria     Mixed          Auclair\n            SeedSourceRegion SeedSourceOrigin TransplantedSiteLat\nAUC.C1.2X1           Central     Pennsylvania               47.75\nAUC.C1.3             Central     Pennsylvania               47.75\nAUC.N1.1               North        Montmagny               47.75\nAUC.N1.3               North        Montmagny               47.75\nAUC.N2.1.X1            North   Rivere-du-Loup               47.75\nAUC.N2.1X2             North   Rivere-du-Loup               47.75\n            TransplantedSiteLon SeedSourceOriginLat SeedSourceOriginLon\nAUC.C1.2X1               -68.08               41.13              -77.62\nAUC.C1.3                 -68.08               41.13              -77.62\nAUC.N1.1                 -68.08               46.95              -70.46\nAUC.N1.3                 -68.08               46.95              -70.46\nAUC.N2.1.X1              -68.08               47.73              -69.48\nAUC.N2.1X2               -68.08               47.73              -69.48\n```\n:::\n:::\n\n\n### Subset community to remove host DNA\n\nBefore proceeding we need to remove host DNA and other contaminants and low-quality sequences. We should do this before rarefaction and subsetting samples since it could change the number of sequences per sample if there is a lot of non-target DNA. We will carry this step out first so that subsequent analyses don't include these non-bacterial ASVs in any of the analyses.\n\nA reminder that primer choice and the habitat you are studying will have a big effect on the amount of non-target DNA that is in your samples. Many commonly used primers (for example, the widely used Earth Microbiome Project 16S rRNA primers 515F–806R which target the V4 region of the 16S gene) will amplify not only free living bacteria, but also DNA from host cells including chloroplasts and mitochondria. If you are working with host-associated microbiomes you may want to consider using a different primer that will not amplify host DNA. For example, when quantifying plant-associated microbiomes we commonly use the 16S primer 799F-1115R which targets the V5 region of the 16S gene and does not amplify chloroplasts or mitochondria.\n\nBecause we used the 799F-1115R primers for this study, we do not expect to find much host DNA, but we should check anyways, since a few host DNA sequences might have been amplified anyways. This is a very important step of the data analysis process since host DNA is not part of the microbial community and should not be included in data analyses. Otherwise, the amount of host DNA in a sample will lead to changes in the abundance of ASVs that are not actually part of the bacterial community being targeted.\n\nWhen using a primer that targets bacteria, host DNA and DNA of non-target organisms in the samples will typically show up ASVs annotated as belonging to a non-Bacteria domain (Archaea or Eukaryota), or the taxonomic order is \"Chloroplast\", or the taxonomic family is \"Mitochondria\".\n\nFirst we check whether any of our sequence are classified into a domain other than the bacteria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many ASVs are classified to different domains?\ntable(taxo[,\"Kingdom\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nBacteria \n    1115 \n```\n:::\n:::\n\n\nAll of the ASVs are classified as belonging to the domain Bacteria. Now let's check for chloroplasts and mitochondria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many ASVs are classified as Chloroplasts?\ntable(taxo[,\"Order\"])[\"Chloroplast\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChloroplast \n         12 \n```\n:::\n\n```{.r .cell-code}\n# How many ASVs are classified as Mitochondria?\ntable(taxo[,\"Family\"])[\"Mitochondria\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMitochondria \n           2 \n```\n:::\n:::\n\n\nThere are only a few ASVs classified as chloroplasts and mitochondria. This is expected since we used a primer that should exclude this host DNA. We will remove these ASVs before continuing our analyses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove chloroplast and mitochondria ASVs from taxonomy table\ntaxo <- subset(taxo, taxo[,\"Order\"]!=\"Chloroplast\" & taxo[,\"Family\"]!=\"Mitochondria\")\n# Remove these ASVs from the community matrix as well\ncomm <- comm[,rownames(taxo)]\n```\n:::\n\n\nIf you find a large number of ASVs classified as non-Bacteria, or as chloroplasts or mitochondria, you will need to remove them from your data set prior to further analysis. Sometimes this can mean that many of your samples will contain few sequences after removing the host DNA and non-bacterial ASVs. If this is the case, you can consider using a primer that will not amplify host DNA, or sequencing your samples more deeply so that enough bacterial DNA will remain after removing the host DNA. However, this latter approach will waste a lot of your sequences, and in some cases if your samples contain mostly host DNA it will be difficult to obtain enough bacterial sequences to carry out ecological analyses.\n\n### Summary statistics\n\nTo begin with, we can calculate summary statistics for our community and taxonomy data. We mentioned earlier that the number of sequences per sample (library size) is normalized, meaning we aimed to sequence approximately the same number of reads per sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of reads per sample\nrowSums(comm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n AUC.C1.2X1    AUC.C1.3    AUC.N1.1    AUC.N1.3 AUC.N2.1.X1  AUC.N2.1X2 \n      43110        1305         307       33424        4966       63971 \n   AUC.N2.2 AUC.S1.1.X2    AUC.S1X1    AUC.S2.2     BC.C1.2   BC.C2.1X1 \n      13344       19407       33599       45548        8670       25333 \n  BC.C2.3X2  BC.C2.3X2b   BC.N1.3X2       BC.N1  BC.N2.1.X3   BC.N2.1X1 \n        271       24140        7507       15009       22164       20475 \n  BC.N2.1X2    PAR.C1.1    PAR.C1.2    PAR.C2.3    PAR.N1.3 QLbactNeg19 \n      10486          13         161       23407        6927          27 \nQLbactNeg20  S.M.C1.3X2    S.M.C2.3  S.M.C2.3X2  S.M.S1.1X1     SF.C1.3 \n         84       10137       20858        8403         485       19081 \n    SF.C2.2     SF.N2.3     SF.S1.3     T2.C1.1     T2.C2.3     T2.N1.1 \n        273       31314       19664       23534         602       20712 \n    T2.S2.1 \n      21663 \n```\n:::\n\n```{.r .cell-code}\n# visualize log10 number of reads per sample\nhist(log10(rowSums(comm)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nWe can see that most samples have at least 4000-10000 sequences/sample. But there are some samples with fewer reads. This includes both the negative control samples as well as some of the 'real' samples. We will need to remove samples with too few reads - we'll return to this shortly.\n\nWe can also look at the number of sequences per ASV.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# log10 of number of reads per ASV\nhist(log10(colSums(comm)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nWe can see that ASV abundances follow a roughly lognormal distribution, meaning that there are a few highly abundant ASVs, but most ASVs are rare. Most ASVs are represented by fewer than 100 sequences (10^2).\n\n### Remove negative controls and samples with low-quality data\n\nOne of the first steps of analysing ASV data sets is to remove control samples, as well as samples with too few sequences. We will also need to normalize our data to take into account the fact that samples differ in the number of sequences they contain.\n\n#### Rarefaction curves\n\nWe will visualize the relationship between the number of sequences in each sample (\"sample size\" in the figures below) versus the number of ASVs they contain (\"species\" in the figures below). These rarefaction curves make it clear why we need to take the number of sequences per sample into account when we analyse sample diversity.\n\nFirst we plot a rarefaction curve for all samples. Each curve shows how the number of ASVs per sample changes with number of sequences in a particular sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrarecurve(comm, step=200, label=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nFor these rarefaction curves, the key thing to look for is where ASV richness (number of ASVs per sample) reaches a plateau relative to the number of reads per sample. It does look like the samples we can see have reached a plateau of ASV richness. But it's hard to see the curve for many of the samples because of the x-axis limits - a few samples with a lot of sequences make it hard to see the less diverse samples. Let's zoom in to look just at the range from 0 to 5000 sequences/sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrarecurve(comm, step=200, label=TRUE, xlim=c(0,5000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nNow we can see that the vast majority of samples reach a plateau in their ASV richness by around 3000-5000 sequences/sample. There are a few samples with very low numbers of both sequences and ASVs. We will now look at the composition of the communities in these different samples.\n\n#### Visualize community composition\n\nAnother way to quickly visualize the composition of all of our samples is to do an ordination to visualize similarity in composition among samples. Here we will visualize a principal components analysis on Hellinger-transformed ASV abundance data. Normally we should normalize the data before doing any diversity analysis but here we just want a quick look at whether some samples have very different composition from the rest. We do a PCA analysis and then plot the ordination results, overlaying confidence ellipses around the samples from the different transplanted stand types/biomes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PCA on Hellinger-transformed community data\ncomm.pca <- prcomp(decostand(comm,\"hellinger\"))\n# plot ordination results\nordiplot(comm.pca, display=\"sites\", type=\"text\",cex=0.5)\nordiellipse(comm.pca, metadata$StandType, label=TRUE,cex=0.8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nThere are two things to note in this ordination figure. First, we can see that along the first axis there is a separation between the negative control samples and a few other samples that cluster with the negative controls, versus all the other samples. Second, we can see that the composition of the communities seems to differ among stand type/biome along the second axis, varying from boreal to mixed to temperate forests. We'll return to this observation later, but for now the important thing is that we can see that there are some samples that are more similar to the negative control samples than they are to the other 'real' samples. Let's visualize the number of sequences per sample (library size) mapped onto these ordination axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Surface plot - plot number of sequences/sample (library size)\nordisurf(comm.pca, rowSums(comm), bubble=TRUE, cex=2,\n         main=\"Library size (sequences/sample)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nWe can see that the common characteristic of the samples that cluster on the right side of the ordination plot, next to the negative control samples, is that these samples contain very few sequences.\n\nThere are several reasons why some samples contain few sequences, but in general this is an indication that these samples contain data of low quality and should be excluded from further analysis. This can be caused by low microbial biomass in the original samples, with some problem with the extraction or amplification of microbial DNA in these samples, or simply by chance. Regardless, the fact that the composition of the microbial communities in these samples is more similar to the negative controls than to the other 'real' samples means we need to get rid of these samples.\n\nIf many of your samples contain few sequences, this could indicate some problem with the protocol being used for sample processing and sequencing, or the normalization step of library preparation. It could also indicate low microbial biomass. In the data we are analysing here, I suspect that the problem with these samples was low microbial biomass. The maple seedlings from which we extracted microbial DNA were sometimes small with only 1-2 tiny leaves, which doesn't contain enough bacterial cells to reliably extract and sequence their DNA. When microbial biomass in a sample is small, the potential importance of contaminant DNA increases. Regardless of the cause, we will have to exclude these samples.\n\nDeciding what number of sequences to use as a cutoff when getting rid of samples with a low number of sequences will depend on the nature of your data set and your biological questions. You should always aim to ensure that you have enough reads per sample to reach a plateau in the rarefaction curve. Beyond that, you may want set a cutoff for a minimum number of reads per sample that ensures that you keep enough samples to have sufficient replicates in your different treatments.\n\n#### Check negative controls\n\nWe sequenced negative controls in this study to ensure that our samples were not contaminated and that the sequences we obtained come from bacteria on leaves and not from some other step of the sample processing such as from the DNA extraction kits or during PCR. As we saw above, the inclusion of these negative control samples is useful because we can look at their composition to identify 'real' samples that might contain contaminants. As a final step, let's look at the negative control samples to see what ASVs they contain.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Abundance of ASVs in negative controls\ncomm['QLbactNeg19',][comm['QLbactNeg19',]>0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ASV_1  ASV_44  ASV_77 ASV_138 \n      1      11      11       4 \n```\n:::\n\n```{.r .cell-code}\ncomm['QLbactNeg20',][comm['QLbactNeg20',]>0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ASV_8   ASV_30   ASV_77   ASV_91  ASV_418  ASV_625 ASV_1002 \n       1        1        2        1       72        3        4 \n```\n:::\n:::\n\n\nOur negative controls look clean - they contain only a few sequences (fewer than 100) belonging to a small number of ASVs. This is the type of result we are looking for, and we will remove these negative controls shortly when we remove low quality samples with small numbers of sequences. We can also look at the taxonomic identity of the ASVs that are present in the negative controls.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Taxonomic identity of ASVs present in negative controls\ntaxo[names(comm['QLbactNeg19',][comm['QLbactNeg19',]>0]),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Kingdom    Phylum           Class                 Order             \nASV_1   \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Rhizobiales\"     \nASV_44  \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacterales\"\nASV_77  \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Lactobacillales\" \nASV_138 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacterales\"\n        Family             Genus                           \nASV_1   \"Beijerinckiaceae\" \"Methylobacterium-Methylorubrum\"\nASV_44  \"Shewanellaceae\"   \"Shewanella\"                    \nASV_77  \"Streptococcaceae\" \"Streptococcus\"                 \nASV_138 \"Shewanellaceae\"   \"Shewanella\"                    \n        Species                                               \nASV_1   NA                                                    \nASV_44  \"algae/haliotis\"                                      \nASV_77  \"cristatus/gordonii/ictaluri/mitis/porcorum/sanguinis\"\nASV_138 NA                                                    \n```\n:::\n\n```{.r .cell-code}\ntaxo[names(comm['QLbactNeg20',][comm['QLbactNeg20',]>0]),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Kingdom    Phylum           Class                 Order             \nASV_8    \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Sphingomonadales\"\nASV_30   \"Bacteria\" \"Bacteroidota\"   \"Bacteroidia\"         \"Cytophagales\"    \nASV_77   \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Lactobacillales\" \nASV_91   \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Acetobacterales\" \nASV_418  \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Xanthomonadales\" \nASV_625  \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Lactobacillales\" \nASV_1002 \"Bacteria\" \"Firmicutes\"     \"Bacilli\"             \"Staphylococcales\"\n         Family               Genus           \nASV_8    \"Sphingomonadaceae\"  \"Sphingomonas\"  \nASV_30   \"Hymenobacteraceae\"  \"Hymenobacter\"  \nASV_77   \"Streptococcaceae\"   \"Streptococcus\" \nASV_91   \"Acetobacteraceae\"   \"Roseomonas\"    \nASV_418  \"Rhodanobacteraceae\" \"Fulvimonas\"    \nASV_625  \"Streptococcaceae\"   \"Streptococcus\" \nASV_1002 \"Staphylococcaceae\"  \"Staphylococcus\"\n         Species                                                                               \nASV_8    \"ginsenosidivorax\"                                                                    \nASV_30   NA                                                                                    \nASV_77   \"cristatus/gordonii/ictaluri/mitis/porcorum/sanguinis\"                                \nASV_91   NA                                                                                    \nASV_418  NA                                                                                    \nASV_625  \"anginosus/mitis/oralis/pneumoniae/pseudopneumoniae\"                                  \nASV_1002 \"aureus/capitis/caprae/epidermidis/haemolyticus/saccharolyticus/saprophyticus/warneri\"\n```\n:::\n:::\n\n\n### Subset community to remove low sequence number samples\n\nNow that we have done some exploratory data analyses, we will take a subset of our communities remove the negative controls as well as samples with a low number of sequences. \n\nWhen we looked at the rarefaction curves, it looked like most samples reached a plateau in number of ASVs per sequence by around 3000-5000 sequences/sample. When we looked at the distribution of number of sequences per sample, we saw that most samples contained at least 4000-5000 sequences. The samples that had fewer than that number of sequences were the ones that clustered with the negative control samples to the right of the ordination figure. Thus, we will set a cutoff of 4000 sequences per sample as a minimum to include a sample in further analysis. This will remove both the negative control samples and the samples of questionable quality that contained very few sequences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what is the dimension of the full community data set\ndim(comm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   37 1027\n```\n:::\n\n```{.r .cell-code}\n# take subset of communities with at least 4000 sequences\ncomm.sub <- comm[rowSums(comm)>=4000,]\n# also take subset of ASVs present in the remaining samples\ncomm.sub <- comm.sub[,apply(comm.sub,2,sum)>0]\n# what is the dimension of the subset community data set?\ndim(comm.sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   27 1008\n```\n:::\n\n```{.r .cell-code}\n# subset metadata and taxonomy to match\nmetadata.sub <- metadata[rownames(comm.sub),]\ntaxo.sub <- taxo[colnames(comm.sub),]\n# descriptive stats for samples and ASVs\n# number of sequences per sample\nhist(rowSums(comm.sub))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# log10 number of sequences per ASV\nhist(log10(colSums(comm.sub)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-2.png){width=672}\n:::\n:::\n\n\n#### PCA on subset data\n\nBefore we normalize the data, let's do the same PCA analysis on Hellinger-transformed ASV abundances, this time only for the samples that remain after getting rid of those with fewer than 5000 sequences/sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomm.sub.pca <- prcomp(decostand(comm.sub,\"hellinger\"))\n# plot ordination results\nordiplot(comm.sub.pca, display=\"sites\", type=\"text\",cex=0.5)\nordiellipse(comm.sub.pca, metadata.sub$StandType, label=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nThis looks much better, there are no longer negative controls or 'outlier' samples that are highly distinct compositionally from the other sampes. We can still clearly see the gradient in composition from boreal-mixed-temperate stand types, which is now falling along the first two axes of the ordination. As mentioned previously, we now need to normalize the data to account for the remaining variation in sequence depth per sample.\n\n## Data normalization for diversity analysis\n\nData normalization for the analysis of microbiome data is a subject of great debate in the scientific literature. Different normalization approaches have been suggested to control for the compositional nature of microbiome data, to maximize statistical power, to account for variation in sequencing depth among samples, and to meet the assumptions of different statistical analysis methods.\n\nI recommend rarefaction as an essential data normalization approach that is needed when analysing the ecological diversity based on amplicon sequencing data sets. Because samples differ in sequencing depth, and this sequencing depth variation is due to the way we prepare libraries for sequencing and not any biological attribute of samples, we need to control for this variation. Rarefaction involves randomly selecting the same number of sequences per sample so that we can compare diversity metrics among samples.\n\nThe simplest justification for rarefaction is that that most measures of diversity are sensitive to sampling intensity. For example, taxa richness increases as we increase the number of individuals we sample from a community. If we take the same community and sample 10 individuals from it, and then sample 1000 individuals, we will obviously find more species when we sample more individuals. This is the fundamental problem that rarefaction addresses - we want to separate variation in diversity caused by some biological process from variation in diversity that is due to variation in library size.\n\nSimulation and empirical studies have shown that rarefaction outperforms other normalization approaches when samples differ in sequencing depth (e.g. Weiss et al. 2017. Normalization and microbial differential abundance strategies depend upon data characteristics. Microbiome 5:27. [https://doi.org/10.1186/s40168-017-0237-y](https://doi.org/10.1186/s40168-017-0237-y)).\n\nDr. Pat Schloss has an excellent [series of videos on rarefaction](https://www.youtube.com/playlist?list=PLmNrK_nkqBpJuhS93PYC-Xr5oqur7IIWf) as part of his [Riffomonas](https://riffomonas.org/) project where he demonstrates very clearly why rarefaction is necessary when calculating diversity from sequencing data sets.\n\n### Rarefaction\n\nTo rarefy our data, we will randomly select the same number of sequences per sample for all of our samples. Because we already excluded samples containing fewer than 4000 sequences, we know that we can rarefy the remaining samples to at least 4000 sequences. Let's look at the rarefaction curve for our subset of samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What is the smallest number of sequences/sample for subset of samples?\nmin(rowSums(comm.sub))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4966\n```\n:::\n\n```{.r .cell-code}\n# Rarefaction curve for subset of samples\nrarecurve(comm.sub, step=200, label=FALSE, xlim=c(0,8000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nWe can see that nearly all samples have reached a plateau of ASV richness by around 3000-4000 sequences/sample. The sample with the smallest number of sequences remaining contains 4966 sequences. We will randomly rarefy our data to this number of sequences. This way, we can feel confident that our samples contain enough sequences to adequately quantify the diversity of ASVs present in the sample even after rarefaction. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0)\n# Randomly rarefy samples\ncomm_rarfy <- rrarefy(comm.sub, sample = min(rowSums(comm.sub)))\n# Remove any ASVs whose abundance is 0 after rarefaction\ncomm_rarfy <- comm_rarfy[,colSums(comm_rarfy)>1]\n# Match ASV taxonomy to rarefied community\ntaxo_rarfy <- taxo.sub[colnames(comm_rarfy),]\n```\n:::\n\n\n#### Check the effect of rarefaction\n\nLet's check to see what effect rarefaction had on the ASV richness of samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rarefaction is not expected to have a major influence on the diversity (as rarefaction curves have reached the plateau).\nrichness_raw <- rowSums((comm.sub>0)*1)\nrichness_rarfy <- rowSums((comm_rarfy>0)*1)\nplot(richness_rarfy~richness_raw,xlab='number of ASVs in raw data',ylab='number of ASVs in rarefied data')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nThis supports the idea that rarefaction is not expected to have a major influence on diversity, since we saw in the rarefaction curves that richness reaches a plateau below the threshold number of sequences that we used for rarefaction. However, now that we have normalized the number of reads per sample, any differences in diversity among samples are not due to potential differences in library size. We are ready to begin our diversity analyses. We will use the rarefied community data set for these analyses.\n\n## Community analysis\n\nBefore we dive into analysing the diversity of leaf bacterial communities on sugar maples, this is a good time to return to the biological questions we posed in the article from which the data are taken.\n\n### Biological questions\n\nIn the study for which these data were collected, we looked at different taxonomic groups (bacteria, fungi, mycorrhizal fungi) living on sugar maple leaves and roots. Here we will concentrate just on leaf bacteria.\n\nOur aim was to assess the relative influence of host genotype (seed provenance) and environment (transplanted site and region) in structuring the microbiome of sugar maple seedlings. When analyzing the data, let's keep focused on these biological questions to help guide our decisions about how to analyze the data. We can take different perspectives to respond to this question by looking at different aspects of diversity. And beyond specific tests of our biological hypotheses, it is also useful to carry out basic descriptive analysis of community structure in order to determine what organisms were living in our samples.\n\nIn the metadata, the variables StandType and TransplantedSite represent the region and site into which the seedlings were planted (environment), and the variables SeedSourceRegion and SeedSourceOrigin represent the region and site from which the seeds were collected (genotype).\n\n### Visualize taxonomic composition of communities\n\nA fundamental question we can address using microbiome data is simply 'who is there'? What are the abundant taxa in different samples?\n\n#### Phylum-level taxonomic composition of samples\n\nRemember that for each ASV, we have taxonomic annotations at different ranks. Here we'll look at the relative abundance of bacterial phyla in each sample. We can repeat these analyses at different taxonomic ranks, but as we go to finer ranks there will be more ASVs with missing data because we could not confidently determine their taxonomic annotation, so there will be more unidentified taxa. Nearly all ASVs have an annotation at the phylum level. We first manipulate the ASV data to create a new data object of phylum abundances, and then we can visualize those abundances.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# community data aggregation at a taxonomic level. e.g. phylum \n# take the sum of each phylum in each sample\ntaxa.agg <- aggregate(t(comm_rarfy),by=list(taxo.sub[colnames(comm_rarfy),2]),FUN=sum)\n# clean up resulting object\nrownames(taxa.agg) <- taxa.agg$Group.1\nphylum_data <- t(taxa.agg[,-1])\n# convert abundances to relative abundances\nphylum_data <- phylum_data/rowSums(phylum_data)\n# remove rare phyla\nphylum_data <- phylum_data[,colSums(phylum_data)>0.01]\n# now reshape phylum data to long format\nphylum_data <- reshape2::melt(phylum_data)\n# rename columns\ncolnames(phylum_data)[1:2] <- c('Samples','Bacteria_phylum')\n# now we can plot phylum relative abundance per sample\nggplot(phylum_data, aes(Samples, weight = value, fill = Bacteria_phylum)) +\n  geom_bar(color = \"black\", width = .7, position = 'fill') +\n  labs( y = 'Relative abundance (%)') +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_fill_viridis_d(direction = -1L) +\n  theme_classic() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n#### Phylum-level composition for each transplant site\n\nIt is also useful to see how taxonomic composition varies with respect to different variables we measured. For example, how does phylum-level taxonomic composition differ among different transplant sites?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# aggregate average phylum abundances per transplanted site\nphylum_data_agg <- aggregate(phylum_data$value,by=list(metadata.sub[phylum_data$Samples,]$TransplantedSite,phylum_data$Bacteria_phylum),FUN=mean)\n# rename columns\ncolnames(phylum_data_agg) <- c('TransplantedSite','Bacteria_phylum','value')\n# now we can plot phylum abundance by transplant site\nggplot(phylum_data_agg, aes(TransplantedSite, weight =value, fill = Bacteria_phylum)) +\n  geom_bar(color = \"black\", width = .7, position = 'fill') +\n  labs( y = 'Relative abundance (%)') +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_fill_viridis_d(direction = -1L) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n### Community diversity (alpha diversity) \n\nTo look at how diversity differed among samples as a function of the different variables we are interested in, we'll begin by looking at the alpha-diversity, or within-community diversity. Two commonly used measures of alpha diversity are ASV richness (the number of ASVs present in the sample), and the Shannon index, also sometimes referred to as Shannon diversity or Shannon diversity index, which measures both the number of taxa in the sample (ASV richness) as well as the equitability of their abundances (evenness).\n\n#### Calculate ASV richness and Shannon diversity of bacterial community\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate ASV richness\n# calculate Shannon index\nShannon <- diversity(comm_rarfy)\nhist(richness_rarfy)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(Shannon)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-2.png){width=672}\n:::\n:::\n\n\n#### Compare bacterial diversity among categories\n\nWe can ask how diversity differs with respect to seedling genotype and environment. Here, let's ask specifically whether leaf bacterial alpha diversity differs between stand types. See Figure 2 of the article by De Bellis et al. 2022 for a comparable analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create data frame to hold alpha diversity values by stand type\ndiv_standtype <- data.frame(richness=richness_rarfy, Shannon=Shannon, standtype=metadata.sub$StandType)\n# set up analysis to compare diversity among different pairs of stand types\nmy_comparisons <- list( c(\"Mixed\", \"Boreal\"), c(\"Mixed\", \"Temperate\"), c(\"Boreal\", \"Temperate\") )\n# plot ASV richness as a function of stand type\nggboxplot(div_standtype, x = \"standtype\", y = \"richness\", hide.ns=F,\n          color = \"standtype\", palette = \"jco\",add = \"jitter\") + \n  stat_compare_means(comparisons = my_comparisons,method = \"t.test\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot Shannon index as a function of stand type\nggboxplot(div_standtype, x = \"standtype\", y = \"Shannon\",hide.ns=F,\n          color = \"standtype\", palette = \"jco\",add = \"jitter\")+ \n  stat_compare_means(comparisons = my_comparisons,method = \"t.test\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-2.png){width=672}\n:::\n:::\n\n\nThese figures indicate that ASV richness does not differ significantly among pairs of stand types. However, the Shannon index does differ somewhat between temperate and boreal stands, where the Shannon index tends to be lower in boreal stands than in temperate stands. These analyses are limited somewhat by the sample size that remains after removing low quality samples; in the original article (De Bellis et al 2022) we compared more sites which increased sample size enough that we found a significant (P<0.05) difference in the Shannon index between temperate and boreal stand types.\n\n#### Bacterial diversity related to numeric variables  \n\nWe can also ask if bacterial diversity differs with respect to numeric variables, for example with respect to latitude. To ask how richness varies with latitude, we will use a generalized linear model to take into account that richness counts are count data and thus are more likely to follow a Poisson distribution than a normal distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot richness versus latitude\nplot(richness_rarfy~metadata.sub$TransplantedSiteLat,xlab='Latitude',ylab='ASV richness')\n# add best fit line\nabline(glm(richness_rarfy~metadata.sub$TransplantedSiteLat), family=\"poisson\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# generalized linear model of richness vs. latitude\nsummary(glm(richness_rarfy~metadata.sub$TransplantedSiteLat, family=\"poisson\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = richness_rarfy ~ metadata.sub$TransplantedSiteLat, \n    family = \"poisson\")\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-8.3234  -2.7974   0.4008   2.0747   8.9199  \n\nCoefficients:\n                                 Estimate Std. Error z value Pr(>|z|)    \n(Intercept)                       7.98399    0.59571  13.403  < 2e-16 ***\nmetadata.sub$TransplantedSiteLat -0.06996    0.01246  -5.615 1.97e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 409.78  on 26  degrees of freedom\nResidual deviance: 378.60  on 25  degrees of freedom\nAIC: 555.3\n\nNumber of Fisher Scoring iterations: 4\n```\n:::\n:::\n\n\nASV richness of leaf bacteria decreases with increasing latitude.\n\nWhat about the Shannon index? Here we'll fit a linear model since we expect the data to be normally distributed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot Shannon index versus latitude\nplot(Shannon~metadata.sub$TransplantedSiteLat,xlab='Latitude',ylab='Shannon diversity')\n# add best fit line\nabline(lm(Shannon~metadata.sub$TransplantedSiteLat))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# linear model of Shannon index vs. latitude\nsummary(lm(Shannon~metadata.sub$TransplantedSiteLat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Shannon ~ metadata.sub$TransplantedSiteLat)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.56982 -0.27830  0.07116  0.35948  1.11564 \n\nCoefficients:\n                                 Estimate Std. Error t value Pr(>|t|)  \n(Intercept)                        7.8728     3.6067   2.183   0.0387 *\nmetadata.sub$TransplantedSiteLat  -0.1030     0.0752  -1.370   0.1829  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5839 on 25 degrees of freedom\nMultiple R-squared:  0.06983,\tAdjusted R-squared:  0.03262 \nF-statistic: 1.877 on 1 and 25 DF,  p-value: 0.1829\n```\n:::\n:::\n\n\nThe Shannon index of leaf bacteria decreases with increasing latitude, but the relationship is not statistically significant.\n\n### Community composition (beta diversity)\n\nWe can now look at the beta-diversity of the samples, which measures the between-community differences in composition.\n\nBeta diversity approaches to studying composition involve calculating a measure of the compositional difference between pairs of communities (= beta diversity, dissimilarity, or distance). Then these distance metrics can be analysed using approaches such as ordination (to summarize the overall trends in community composition among samples) or PERMANOVA (to test whether groups of samples differ significantly in their composition).\n\nThere are a huge number of different beta diversity/dissimilarity metrics that have been used in ecology. There is an ongoing debate about the relative advantages and disadvantages of these beta diversity measures and approaches. There are several different beta diversity metrics and ordination approaches that work well based on simulation studies and empirical analysis. For those wanting to learn more about multivariate analysis and beta diversity approaches for the analysis of ecological communities, the book [\"Numerical Ecology with R\"](http://adn.biol.umontreal.ca/~numericalecology/numecolR/) by Borcard, Gillet and Legendre is an excellent reference. Dr. Pierre Legendre also maintains a [website](http://adn.biol.umontreal.ca/~numericalecology/documents_enseignement/index.html) with links to several [excellent courses](http://adn.biol.umontreal.ca/~numericalecology/Trieste16/) that serve as a complete introduction to multivariate methods in ecology.\n\nIn this workshop we will focus on a few different beta diversity metrics and ordination approaches that have been shown to perform well in theory and practise when applied to ecological community data. How should you choose which of these approaches to your own data? This is not an easy question to answer, as long as you are using a method that works well with ecological community data, there are different reasons to prefer one method over another. Ultimately, it can be useful to try different approaches and see if you obtain similar results with your data.\n\n#### Ordination - Principal Components Analysis (PCA)\n\nPrincipal components analysis (PCA) is a commonly used approach to analysing multivariate data. PCA uses eigenanalysis of Euclidean distances among samples computed from ASV abundance data to identify the axes of correlated variation that explain the most possible variation in your multivariate data. These axes correspond to major gradients of changes in community composition. We typically focus on the first few axes of the PCA ordination, since these axes should capture the majority of the variation in community composition among samples.\n\nIt's important to note that PCA should never be used to analyze untranformed ecological community data. PCA is based on the Euclidean distance among samples. Ecological community data violate many of the assumptions of PCA - recall that there are many zeroes in our matrix of ASV abundances, and the distribution of abundance values among ASVs is very non-normal. [Legendre and Gallagher (2001)](http://adn.biol.umontreal.ca/~numericalecology/Reprints/Legendre_&_Gallagher.pdf) showed that several transformations including the Chord and Hellinger transformation allow ecological community data matrices to be analyzed using PCA. Here we will use the Hellinger transformation to transform ASV abundances prior to analyzing them with a PCA ordination.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create Hellinger-transformed version of rarefied community data\ncomm_hel <- decostand(comm_rarfy,method='hellinger')\n# PCA analysis of Hellinger-transformed community data\ncomm_hel_PCA <- prcomp(comm_hel)\n# Summarize variance in beta diversity explained by PCA axes\nsummary(comm_hel_PCA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportance of components:\n                          PC1     PC2     PC3    PC4     PC5     PC6     PC7\nStandard deviation     0.2599 0.20969 0.19519 0.1718 0.16095 0.15289 0.14424\nProportion of Variance 0.1497 0.09746 0.08445 0.0654 0.05742 0.05181 0.04612\nCumulative Proportion  0.1497 0.24712 0.33157 0.3970 0.45439 0.50620 0.55232\n                           PC8    PC9    PC10    PC11    PC12    PC13    PC14\nStandard deviation     0.13835 0.1327 0.12813 0.12268 0.12067 0.11446 0.11003\nProportion of Variance 0.04242 0.0390 0.03639 0.03336 0.03228 0.02904 0.02684\nCumulative Proportion  0.59474 0.6338 0.67014 0.70350 0.73577 0.76481 0.79165\n                          PC15    PC16    PC17    PC18    PC19    PC20    PC21\nStandard deviation     0.10440 0.10234 0.09813 0.09351 0.09258 0.09083 0.08976\nProportion of Variance 0.02416 0.02321 0.02134 0.01938 0.01900 0.01829 0.01786\nCumulative Proportion  0.81581 0.83902 0.86037 0.87975 0.89875 0.91704 0.93490\n                          PC22    PC23    PC24    PC25    PC26      PC27\nStandard deviation     0.08279 0.08176 0.07641 0.07181 0.06955 2.431e-16\nProportion of Variance 0.01519 0.01482 0.01294 0.01143 0.01072 0.000e+00\nCumulative Proportion  0.95009 0.96491 0.97785 0.98928 1.00000 1.000e+00\n```\n:::\n\n```{.r .cell-code}\n# Plot PCA results\nordiplot(comm_hel_PCA, display = 'sites', type = 'text',cex=0.8, main=\"PCA on Hellinger transformed data\")\n# Add ellipses around samples from different stand types\nordiellipse(comm_hel_PCA, metadata.sub$StandType, label=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\nThe PCA ordination diagram indicates the overall compositional similarity of samples. Samples that are close together in the ordination space contain similar ASVs with similar abundances. We can see that the gradient in community composition among different stand types is visible along the first two axes. Samples from each stand type tend to contain compositionally similar leaf bacterial communities.\n\nRecall that when we were first looking at the composition of communities in our samples (prior to subsetting and rarefaction), we obtained a similar looking result. As noted, because we used a rarefaction threshold that was sufficient for the rarefaction curves of the samples to reach a plateau in ASV richness, we do not expect major differences between the analysis of rarefied versus non-rarefied data. However, by analyzing the rarefied data we are now confident that the differences in composition among the samples are due to true differences in community composition and not due to differences in library size among samples.\n\n#### Ordination - Non-metric Multidimensional Scaling (NMDS)\n\nAnother commonly used ordination approach in ecology is non-metric multidimensional scaling (NMDS). NMDS can be used with any beta diversity distance metric. Unlike PCA, NMDS is not based on eigenanalysis of the distance metric. Rather, NMDS uses an algorithm to find an ordination of samples in a few dimensions that represents as best as possible the rank transformed pairwise distances among samples measured with the original distance metric. When carrying out a NMDS analysis, rather than obtaining many PCA axes, the user specifies how many axes to identify. NMDS analysis is based on a heuristic algorithm that may give slightly different results when run multiple times on the same data, whereas PCA has a unique analytical solution.\n\nNMDS can be used with any distance metric. Commonly in microbial ecology it is used with the Bray-Curtis distance. The Bray-Curtis distance, like the Hellinger distance, has been shown to perform well compared with other distance measures ([Faith et al. 1987](https://link.springer.com/article/10.1007/BF00038687), Gallagher and Legendre 2001).\n\nHere we'll calculate a NMDS ordination using Bray-Curtis distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NMDS ordination based on Bray-Curtis distances\ncomm_NMDS <- metaMDS(comm_hel, distance=\"bray\", trace=FALSE)\nordiplot(comm_NMDS, cex = 0.5, type = 'text', display='sites')\nordiellipse(comm_NMDS, metadata.sub$StandType, label=TRUE)\n# overlay the direction of latitude effect on bacteria community composition\nef <- envfit(comm_NMDS, metadata.sub$TransplantedSiteLat)\nrownames(ef$vectors$arrows)='Latitude'\nplot(ef)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nHere we can see that the NMDS ordination based on Bray-Curtis distances among samples looks quite similar to the PCA ordination, with community composition differing among different stand types. We have also added an arrow indicating the correlation between latitude and the ordination axes, which also supports the idea that communities vary as we move from boreal stands in the north to temperate stands in the south.\n\n#### PERMANOVA\n\nOrdination analyses allow us to visualize how the composition of communities differs among samples and how it relates to different variables in a qualitative way. For example, we can see from the ordination diagrams above that it seems that community composition differs among stand types. We can statistically test whether stand types differ in composition using permutational multivariate analysis of variance (PERMANOVA). A PERMANOVA works in a way similar to an ANOVA, but with multivariate compositional data. PERMANOVA tests indicate whether community composition (beta diversity) differs among groups of samples.\n\nHere we can first use a PERMANOVA to test whether community composition differs among stand types. As with ordination methods, a PERMANOVA can be run on any distance metric. Let's try computing a PERMANOVA using both Hellinger distance (used for the PCA) and Bray-Curtis distance (used for the NMDS).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set number of permutations for PERMANOVA\nperm <- how(nperm = 999)\n# PERMANOVA on Hellinger-transformed Euclidean distances\nadonis2(formula = dist(comm_hel) ~ StandType, data = metadata.sub, permutations = perm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPermutation test for adonis under reduced model\nTerms added sequentially (first to last)\nPermutation: free\nNumber of permutations: 999\n\nadonis2(formula = dist(comm_hel) ~ StandType, data = metadata.sub, permutations = perm)\n          Df SumOfSqs      R2      F Pr(>F)    \nStandType  2   1.8390 0.15678 2.2311  0.001 ***\nResidual  24   9.8911 0.84322                  \nTotal     26  11.7301 1.00000                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n# PERMANOVA on Bray-Curtis distances\nadonis2(formula = vegdist(comm_rarfy, method=\"bray\") ~ StandType, data = metadata.sub, permutations = perm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPermutation test for adonis under reduced model\nTerms added sequentially (first to last)\nPermutation: free\nNumber of permutations: 999\n\nadonis2(formula = vegdist(comm_rarfy, method = \"bray\") ~ StandType, data = metadata.sub, permutations = perm)\n          Df SumOfSqs      R2      F Pr(>F)    \nStandType  2   0.9716 0.17856 2.6085  0.001 ***\nResidual  24   4.4697 0.82144                  \nTotal     26   5.4413 1.00000                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nBoth of these analyses indicate that community composition differs significantly among stand types, explaining around 16-18% of variation in the distance metric.\n\nPERMANOVA can also be used to test more complex experimental designs. Here, let's replicate the analyses by De Bellis et al. (2022). We used PERMANOVA on Bray-Curtis distances to measure the relative importance of transplanted region and site (environment) versus origin region and site (genotype) in determining the composition of leaf bacterial communities. Site is nested within region for both variable types, which we represent using \"/\" in the formula (region/site).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npermanova.bc <- adonis2(formula = vegdist(comm_rarfy, method=\"bray\") ~ StandType/TransplantedSite * SeedSourceRegion/SeedSourceOrigin, data = metadata.sub, permutations = perm)\nprint(permanova.bc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPermutation test for adonis under reduced model\nTerms added sequentially (first to last)\nPermutation: free\nNumber of permutations: 999\n\nadonis2(formula = vegdist(comm_rarfy, method = \"bray\") ~ StandType/TransplantedSite * SeedSourceRegion/SeedSourceOrigin, data = metadata.sub, permutations = perm)\n                                                             Df SumOfSqs\nStandType                                                     2   0.9716\nSeedSourceRegion                                              2   0.2277\nStandType:TransplantedSite                                    3   0.6410\nStandType:SeedSourceRegion                                    3   0.5562\nStandType:TransplantedSite:SeedSourceRegion                   3   0.7350\nStandType:TransplantedSite:SeedSourceRegion:SeedSourceOrigin  5   1.1043\nResidual                                                      8   1.2056\nTotal                                                        26   5.4413\n                                                                  R2      F\nStandType                                                    0.17856 3.2236\nSeedSourceRegion                                             0.04184 0.7554\nStandType:TransplantedSite                                   0.11780 1.4177\nStandType:SeedSourceRegion                                   0.10222 1.2302\nStandType:TransplantedSite:SeedSourceRegion                  0.13507 1.6256\nStandType:TransplantedSite:SeedSourceRegion:SeedSourceOrigin 0.20294 1.4654\nResidual                                                     0.22157       \nTotal                                                        1.00000       \n                                                             Pr(>F)    \nStandType                                                     0.001 ***\nSeedSourceRegion                                              0.835    \nStandType:TransplantedSite                                    0.058 .  \nStandType:SeedSourceRegion                                    0.191    \nStandType:TransplantedSite:SeedSourceRegion                   0.019 *  \nStandType:TransplantedSite:SeedSourceRegion:SeedSourceOrigin  0.031 *  \nResidual                                                               \nTotal                                                                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThis analysis shows that, as mentioned by De Bellis et al. (2022), stand type of planting was the most important variable explaining variation in leaf bacterial community composition. There was a marginally significant variation among transplanted sites. There were also significant interactions among transplant region and site as a function of seed source region and seed source site of origin, indicating that the leaf bacterial communities of some genotypes respond differently to different environments. Taken together, this analysis indicates that environment (transplant region and site) have a greater impact on the composition of leaf bacterial communities than genotype, although there is also an interaction between genotype and environment.\n\n### Differentially abundant taxa\n\nBy analyzing alpha and beta diversity, we have determined that some groups of samples differ in their diversity and composition. But measures of diversity look at the entire community. We may also be interested in knowing which individual taxa differ in abundance among groups of samples. To address this question we can use differential abundance analysis. There are many methods that can be used for differential abundance analysis, and as for other ecological analysis there is active debate about which methods should be used to detect differences in taxa abundances between groups of samples. \n\nDifferential abundance analysis allows you to identify differentially abundant taxa between two groups. There are many methods for this type of analysis such as ALDEx2, ANCOM-BC, and DESeq2. Several recent articles have compared the performance of these differential abundance approaches when applied to microbiome data ([Calgaro et al. (2020)](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02104-1), [Nearing et al. (2022)](https://www.nature.com/articles/s41467-022-28034-z)), finding that some methods perform better than others, but also finding that different methods are sensitive to different aspects of data structure and with differing statistical power and sensitivity. Here we will compare two different methods for detecting differentially abundant taxa.\n\nHaving seen a clear difference in leaf bacterial community composition between temperate and boreal forest stand types, we may ask which bacterial ASVs are differentially abundant between temperate versus boreal forest stand types. \n\n#### DESeq2\n\nThe DESeq2 approach ([Love et al. 2014. Genome Biol 15:550](https://doi.org/10.1186/s13059-014-0550-8)) models taxa abundances using a negative binomial distribution to detect taxa that are differentially abundant between groups. This approach was initially developed for gene expression analyses, but it is commonly used in the analysis of differential taxa abundances in microbial ecology.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# conduct DESeq analysis of ASV abundances between temperate and boreal stand types\n# We add a pseudocount (+1) to each abundance value to avoid zeroes\ncountdata <- data.frame(ASV=colnames(comm_rarfy),t(comm_rarfy+1))\nmetas <- metadata.sub\nmetas$StandType <- relevel(as.factor(metas$StandType),ref='Boreal')\ndds <- DESeqDataSetFromMatrix(countData=countdata, \n                              colData=metas,\n                              design=~StandType, tidy = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nconverting counts to integer mode\n```\n:::\n\n```{.r .cell-code}\ndds2 <- DESeq(dds, fitType=\"local\", quiet=TRUE)\nres <- results(dds2, name=\"StandType_Temperate_vs_Boreal\")\n#coef of differently abundant ASV between temperate and boreal forest\nhead(res[order(res$padj),])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlog2 fold change (MLE): StandType Temperate vs Boreal \nWald test p-value: StandType Temperate vs Boreal \nDataFrame with 6 rows and 6 columns\n        baseMean log2FoldChange     lfcSE      stat      pvalue        padj\n       <numeric>      <numeric> <numeric> <numeric>   <numeric>   <numeric>\nASV_8  102.71993        6.31596  1.070810   5.89830 3.67260e-09 1.31686e-06\nASV_37  16.25372        5.24749  0.906315   5.78992 7.04201e-09 1.31686e-06\nASV_94   8.43527        4.85485  0.860202   5.64385 1.66291e-08 2.07309e-06\nASV_26  29.32340        5.88306  1.086821   5.41309 6.19468e-08 5.79203e-06\nASV_22  36.19921        5.19054  0.994117   5.22126 1.77713e-07 1.32929e-05\nASV_44  20.59886       -5.09305  1.001330  -5.08629 3.65139e-07 2.27603e-05\n```\n:::\n\n```{.r .cell-code}\n#Number of significantly different ASVs (adjusted_p_value<0.05)\ndim(res[is.na(res$padj)==F&res$padj<0.05,])[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 77\n```\n:::\n\n```{.r .cell-code}\nsig_des <- rownames(res[is.na(res$padj)==F&res$padj<0.05,])\n# show the distribution of these marker ASV in a heatmap\nmetatoshow <- subset(metas,!metas$StandType%in%'Mixed')\ndatatoshow <- comm_rarfy[rownames(metatoshow),rownames(res[order(res$padj),])[1:20]]\nannotation_col = data.frame(standtype = as.factor(metatoshow$StandType))\nrownames(annotation_col)=rownames(datatoshow)\npheatmap(t(datatoshow),scale= \"row\", annotation_col = annotation_col,cluster_cols = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n#### ANCOM-BC\n\nThe ANCOM-BC approach ([Lin and Peddada. 2020. Nat. Comm. 35:14](https://www.nature.com/articles/s41467-020-17041-7)) detects differentially abundant taxa by analysis of compositions of microbiomes with bias correction. [Nearing et al. (2022)](https://www.nature.com/articles/s41467-022-28034-z) found this method to be among the best-performing methods for detection of differentially abundant taxa. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# conduct ANCOM-BC analysis of differentially abundant taxa between boreal/temperate stand types\nASV <- otu_table(countdata[,-1],taxa_are_rows<-T)\nTAX <- tax_table(as.matrix(taxo.sub))\nMETA <- sample_data(metas)\nphyloseqobj = phyloseq(ASV, TAX, META)\nancob <- ancombc(phyloseq=phyloseqobj,formula='StandType',p_adj_method = \"holm\", zero_cut = 0.90, lib_cut = 1000,\n                                 group = 'StandType', struc_zero = TRUE, neg_lb = F,\n                                 tol = 1e-5, max_iter = 100, conserve = TRUE,\n                                 alpha = 0.05, global = TRUE)\nres_ancob <- ancob$res\n#show coefficients of differential abundance test between temperate vs. boreal\ncoef_ancob <- data.frame(beta=res_ancob$beta$StandTypeTemperate,se=res_ancob$se$StandTypeTemperate,W=res_ancob$W$StandTypeTemperate,\n           p_val=res_ancob$p_val$StandTypeTemperate,p_adj=res_ancob$q_val$StandTypeTemperate,sign_dif=res_ancob$diff_abn$StandTypeTemperate,\n           row.names = rownames(res_ancob$beta))\ncoef_ancob <- coef_ancob[order(coef_ancob$p_adj),]\nhead(coef_ancob)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              beta        se         W        p_val        p_adj sign_dif\nASV_44  -2.2721929 0.4081187 -5.567481 2.584489e-08 2.101189e-05     TRUE\nASV_22   2.5469174 0.5179469  4.917333 8.773119e-07 7.123773e-04     TRUE\nASV_11   2.2662741 0.4980824  4.549998 5.364645e-06 4.350727e-03     TRUE\nASV_101 -1.8558870 0.4108073 -4.517658 6.252726e-06 5.064708e-03     TRUE\nASV_37   2.3964439 0.5694741  4.208170 2.574473e-05 2.082749e-02     TRUE\nASV_129  0.4651886 0.1182296  3.934619 8.332862e-05 6.732952e-02    FALSE\n```\n:::\n\n```{.r .cell-code}\n#Number of significantly different ASVs (adjusted p_value<0.05)\ndim(coef_ancob[coef_ancob$p_adj<0.05,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 6\n```\n:::\n\n```{.r .cell-code}\nsig_ancob <- rownames(coef_ancob[1:dim(coef_ancob[coef_ancob$p_adj<0.05,])[1],])\n# show the significant ASVs\nmetatoshow <- subset(metas,!metas$StandType%in%'Mixed')\ndatatoshow <- comm_rarfy[rownames(metatoshow),sig_ancob]\nannotation_col = data.frame(standtype = as.factor(metatoshow$StandType))\nrownames(annotation_col)=rownames(datatoshow)\npheatmap(t(datatoshow),scale= \"row\", annotation_col = annotation_col,cluster_cols = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n#### Comparing differentially abundant taxa among methods\n\nIn a comparison between boreal and temperate forest stand types, ANCOM-BC and DESeq2 detected different numbers of differentially abundant ASVs. As noted earlier, there is still debate about which methods perform best for differentially abundant taxa detection. While DESeq2 and ANCOM identified differentially abundant taxa that are potentially unique to each method, there may be some ASVs that were detected as differentially abundant using both methods. This type of cross-method comparison can help us to identify statistically robust results - if taxa are differentially abundant enough to be detected by multiple methods, they should differ strongly in their abundance between groups. Let's look at the distribution of these differentially abundant ASVs identified by both methods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify significantly differentially abundant ASVs according to both methods\nsig_both <- sig_des[sig_des%in%sig_ancob]\nsig_both\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ASV_11\"  \"ASV_22\"  \"ASV_37\"  \"ASV_44\"  \"ASV_101\"\n```\n:::\n\n```{.r .cell-code}\n# show the distribution of these differentially abundant ASVs\nmetatoshow <- subset(metas,!metas$StandType%in%'Mixed')\ndatatoshow <- comm_rarfy[rownames(metatoshow),sig_both]\nannotation_col = data.frame(standtype = as.factor(metatoshow$StandType))\nrownames(annotation_col)=rownames(datatoshow)\npheatmap(t(datatoshow),scale= \"row\", annotation_col = annotation_col,cluster_cols = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\nWe can also inspect the taxonomic annotations of these differentially abundant ASVs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxo_rarfy[sig_both,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Kingdom    Phylum           Class                 Order             \nASV_11  \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Rhizobiales\"     \nASV_22  \"Bacteria\" \"Bacteroidota\"   \"Bacteroidia\"         \"Cytophagales\"    \nASV_37  \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Sphingomonadales\"\nASV_44  \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacterales\"\nASV_101 \"Bacteria\" \"Proteobacteria\" \"Alphaproteobacteria\" \"Rhizobiales\"     \n        Family              Genus                            Species         \nASV_11  \"Beijerinckiaceae\"  \"Methylobacterium-Methylorubrum\" NA              \nASV_22  \"Hymenobacteraceae\" \"Hymenobacter\"                   NA              \nASV_37  \"Sphingomonadaceae\" \"Sphingomonas\"                   NA              \nASV_44  \"Shewanellaceae\"    \"Shewanella\"                     \"algae/haliotis\"\nASV_101 \"Beijerinckiaceae\"  \"Methylocella\"                   NA              \n```\n:::\n:::\n\n\n### Final steps - clean up and save data objects and workspace\n\nWe have now completed our ecological analyses of leaf bacterial communities.\nYou may want to save the R workspace containing all the different data objects so that you can reload it in the future without having to re-run the analyses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Save entire R workspace to file\nsave.image(\"Microbiome-ecological-analysis-workspace.RData\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}